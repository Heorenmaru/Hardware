
L151_ADS1220.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009084  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009224  08009224  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800922c  0800922c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000137c  20000180  080093b4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  080093b4  000214fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010877  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003564  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017879  00000000  00000000  000359d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138d8  00000000  00000000  0004d249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f74c  00000000  00000000  00060b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e026d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  000e02c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000180 	.word	0x20000180
 8000158:	00000000 	.word	0x00000000
 800015c:	080091a8 	.word	0x080091a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000184 	.word	0x20000184
 8000178:	080091a8 	.word	0x080091a8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC_Init+0xa8>)
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <MX_ADC_Init+0xac>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_ADC_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC_Init+0xa8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_ADC_Init+0xa8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC_Init+0xa8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC_Init+0xa8>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_ADC_Init+0xa8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC_Init+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC_Init+0xa8>)
 80004f6:	f000 faa7 	bl	8000a48 <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000500:	f000 f908 	bl	8000714 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000504:	2311      	movs	r3, #17
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 800050c:	2307      	movs	r3, #7
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC_Init+0xa8>)
 8000516:	f000 fbdd 	bl	8000cd4 <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000520:	f000 f8f8 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000019c 	.word	0x2000019c
 8000530:	40012400 	.word	0x40012400

08000534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_ADC_MspInit+0x34>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d10b      	bne.n	800055e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_ADC_MspInit+0x38>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_ADC_MspInit+0x38>)
 800054c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000550:	6213      	str	r3, [r2, #32]
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_ADC_MspInit+0x38>)
 8000554:	6a1b      	ldr	r3, [r3, #32]
 8000556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40012400 	.word	0x40012400
 800056c:	40023800 	.word	0x40023800

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_GPIO_Init+0xd4>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a2e      	ldr	r2, [pc, #184]	; (8000644 <MX_GPIO_Init+0xd4>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <MX_GPIO_Init+0xd4>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a28      	ldr	r2, [pc, #160]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <MX_GPIO_Init+0xd8>)
 80005d6:	f000 ff72 	bl	80014be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <MX_GPIO_Init+0xdc>)
 80005e2:	f000 ff6c 	bl	80014be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED13_Pin;
 80005e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <MX_GPIO_Init+0xd8>)
 8000600:	f000 fdc6 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS_CS_Pin;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_CS_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_GPIO_Init+0xdc>)
 800061e:	f000 fdb7 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_GPIO_Init+0xe0>)
 8000638:	f000 fdaa 	bl	8001190 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020000 	.word	0x40020000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 f965 	bl	8000926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f80c 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff86 	bl	8000570 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000664:	f007 fdac 	bl	80081c0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000668:	f000 f85a 	bl	8000720 <MX_SPI2_Init>
  MX_ADC_Init();
 800066c:	f7ff ff0a 	bl	8000484 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  kernel_main();
 8000670:	f008 faba 	bl	8008be8 <kernel_main>
 8000674:	e7fc      	b.n	8000670 <main+0x1c>
	...

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	; 0x48
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fd86 	bl	8009198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SystemClock_Config+0x98>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SystemClock_Config+0x98>)
 80006a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb3a 	bl	8002d48 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006da:	f000 f81b 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fe56 	bl	80033a8 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000702:	f000 f807 	bl	8000714 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3748      	adds	r7, #72	; 0x48
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40007000 	.word	0x40007000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI2_Init+0x60>)
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_SPI2_Init+0x64>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_SPI2_Init+0x60>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI2_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI2_Init+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_SPI2_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI2_Init+0x60>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_SPI2_Init+0x60>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI2_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI2_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI2_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI2_Init+0x60>)
 8000766:	220a      	movs	r2, #10
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI2_Init+0x60>)
 800076c:	f003 f86e 	bl	800384c <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8000776:	f7ff ffcd 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001f0 	.word	0x200001f0
 8000784:	40003800 	.word	0x40003800

08000788 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_SPI_MspInit+0x7c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d128      	bne.n	80007fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ec:	2305      	movs	r3, #5
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_SPI_MspInit+0x84>)
 80007f8:	f000 fcca 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40003800 	.word	0x40003800
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_MspInit+0x58>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <HAL_MspInit+0x58>)
 800081c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000820:	6253      	str	r3, [r2, #36]	; 0x24
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_MspInit+0x58>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_MspInit+0x58>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <HAL_MspInit+0x58>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6213      	str	r3, [r2, #32]
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_MspInit+0x58>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_MspInit+0x58>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_MspInit+0x58>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6253      	str	r3, [r2, #36]	; 0x24
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_MspInit+0x58>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40023800 	.word	0x40023800

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f88b 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USB_LP_IRQHandler+0x10>)
 80008c2:	f000 ff18 	bl	80016f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000eec 	.word	0x20000eec

080008d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80008dc:	f7ff fff8 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f8:	4c09      	ldr	r4, [pc, #36]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000906:	f008 fc23 	bl	8009150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fea3 	bl	8000654 <main>
  bx lr
 800090e:	4770      	bx	lr
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000918:	08009234 	.word	0x08009234
  ldr r2, =_sbss
 800091c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000920:	200014fc 	.word	0x200014fc

08000924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>

08000926 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 fbeb 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000936:	200f      	movs	r0, #15
 8000938:	f000 f80e 	bl	8000958 <HAL_InitTick>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e001      	b.n	800094c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000948:	f7ff ff62 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_InitTick+0x68>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d022      	beq.n	80009b2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_InitTick+0x6c>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_InitTick+0x68>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000978:	fbb1 f3f3 	udiv	r3, r1, r3
 800097c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fbf8 	bl	8001176 <HAL_SYSTICK_Config>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10f      	bne.n	80009ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d809      	bhi.n	80009a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	f000 fbc2 	bl	8001122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0x70>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e007      	b.n	80009b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e004      	b.n	80009b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e001      	b.n	80009b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <HAL_IncTick+0x1c>)
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000248 	.word	0x20000248
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000248 	.word	0x20000248

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d004      	beq.n	8000a28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_Delay+0x40>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a28:	bf00      	nop
 8000a2a:	f7ff ffe1 	bl	80009f0 <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <HAL_Delay+0x26>
  {
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000008 	.word	0x20000008

08000a48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d101      	bne.n	8000a68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e127      	b.n	8000cb8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d115      	bne.n	8000aa2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	4b8e      	ldr	r3, [pc, #568]	; (8000cc0 <HAL_ADC_Init+0x278>)
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	4a8d      	ldr	r2, [pc, #564]	; (8000cc0 <HAL_ADC_Init+0x278>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6213      	str	r3, [r2, #32]
 8000a90:	4b8b      	ldr	r3, [pc, #556]	; (8000cc0 <HAL_ADC_Init+0x278>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fd49 	bl	8000534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 80ff 	bne.w	8000cae <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	f043 0202 	orr.w	r2, r3, #2
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000ac4:	4b7f      	ldr	r3, [pc, #508]	; (8000cc4 <HAL_ADC_Init+0x27c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	497c      	ldr	r1, [pc, #496]	; (8000cc4 <HAL_ADC_Init+0x27c>)
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ade:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000b02:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000b08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	fab3 f383 	clz	r3, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000b2a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	2b10      	cmp	r3, #16
 8000b38:	d007      	beq.n	8000b4a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000b42:	4313      	orrs	r3, r2
 8000b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b46:	4313      	orrs	r3, r2
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b54:	2b40      	cmp	r3, #64	; 0x40
 8000b56:	d04f      	beq.n	8000bf8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000b6a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6912      	ldr	r2, [r2, #16]
 8000b70:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000b74:	d003      	beq.n	8000b7e <HAL_ADC_Init+0x136>
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6912      	ldr	r2, [r2, #16]
 8000b7a:	2a01      	cmp	r2, #1
 8000b7c:	d102      	bne.n	8000b84 <HAL_ADC_Init+0x13c>
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_Init+0x13e>
 8000b84:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000b86:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d125      	bne.n	8000be4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d114      	bne.n	8000bcc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	fa92 f2a2 	rbit	r2, r2
 8000bb4:	617a      	str	r2, [r7, #20]
  return result;
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000bca:	e00b      	b.n	8000be4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd0:	f043 0220 	orr.w	r2, r3, #32
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <HAL_ADC_Init+0x280>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_ADC_Init+0x284>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c14:	d003      	beq.n	8000c1e <HAL_ADC_Init+0x1d6>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d119      	bne.n	8000c52 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000c32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	fa92 f2a2 	rbit	r2, r2
 8000c3a:	60fa      	str	r2, [r7, #12]
  return result;
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	fa03 f202 	lsl.w	r2, r3, r2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c50:	e007      	b.n	8000c62 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_ADC_Init+0x288>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d10b      	bne.n	8000c8a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f023 0303 	bic.w	r3, r3, #3
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c88:	e014      	b.n	8000cb4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f023 0312 	bic.w	r3, r3, #18
 8000c92:	f043 0210 	orr.w	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	e002      	b.n	8000cb4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40012700 	.word	0x40012700
 8000cc8:	fcfc16ff 	.word	0xfcfc16ff
 8000ccc:	c0fff18d 	.word	0xc0fff18d
 8000cd0:	bf80fffe 	.word	0xbf80fffe

08000cd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x20>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e134      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x28a>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b06      	cmp	r3, #6
 8000d02:	d81c      	bhi.n	8000d3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	3b05      	subs	r3, #5
 8000d16:	221f      	movs	r2, #31
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4019      	ands	r1, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3b05      	subs	r3, #5
 8000d30:	fa00 f203 	lsl.w	r2, r0, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3c:	e07e      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b0c      	cmp	r3, #12
 8000d44:	d81c      	bhi.n	8000d80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b23      	subs	r3, #35	; 0x23
 8000d58:	221f      	movs	r2, #31
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4019      	ands	r1, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	3b23      	subs	r3, #35	; 0x23
 8000d72:	fa00 f203 	lsl.w	r2, r0, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d7e:	e05d      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d81c      	bhi.n	8000dc2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	3b41      	subs	r3, #65	; 0x41
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	3b41      	subs	r3, #65	; 0x41
 8000db4:	fa00 f203 	lsl.w	r2, r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc0:	e03c      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b18      	cmp	r3, #24
 8000dc8:	d81c      	bhi.n	8000e04 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b5f      	subs	r3, #95	; 0x5f
 8000ddc:	221f      	movs	r2, #31
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4019      	ands	r1, r3
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b5f      	subs	r3, #95	; 0x5f
 8000df6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
 8000e02:	e01b      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b7d      	subs	r3, #125	; 0x7d
 8000e16:	221f      	movs	r2, #31
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4019      	ands	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b7d      	subs	r3, #125	; 0x7d
 8000e30:	fa00 f203 	lsl.w	r2, r0, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d81a      	bhi.n	8000e7a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6959      	ldr	r1, [r3, #20]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	2207      	movs	r2, #7
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	4019      	ands	r1, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	6898      	ldr	r0, [r3, #8]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	e042      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b13      	cmp	r3, #19
 8000e80:	d81c      	bhi.n	8000ebc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6919      	ldr	r1, [r3, #16]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	3b1e      	subs	r3, #30
 8000e94:	2207      	movs	r2, #7
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	6898      	ldr	r0, [r3, #8]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b1e      	subs	r3, #30
 8000eae:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	e021      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b1a      	cmp	r3, #26
 8000ec2:	d81c      	bhi.n	8000efe <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68d9      	ldr	r1, [r3, #12]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b3c      	subs	r3, #60	; 0x3c
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6898      	ldr	r0, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	3b3c      	subs	r3, #60	; 0x3c
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	e000      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000efe:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d003      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f0c:	2b11      	cmp	r3, #17
 8000f0e:	d121      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_ADC_ConfigChannel+0x294>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d11b      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_ADC_ConfigChannel+0x294>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <HAL_ADC_ConfigChannel+0x294>)
 8000f22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f26:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d111      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_ConfigChannel+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_ADC_ConfigChannel+0x29c>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0c9a      	lsrs	r2, r3, #18
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000f46:	e002      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f9      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40012700 	.word	0x40012700
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	431bde83 	.word	0x431bde83

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff90 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff2d 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff42 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a6:	e154      	b.n	8001452 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8146 	beq.w	800144c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d005      	beq.n	80011d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b03      	cmp	r3, #3
 8001244:	d017      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	6939      	ldr	r1, [r7, #16]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0203 	and.w	r2, r3, #3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80a0 	beq.w	800144c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4b58      	ldr	r3, [pc, #352]	; (8001470 <HAL_GPIO_Init+0x2e0>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a57      	ldr	r2, [pc, #348]	; (8001470 <HAL_GPIO_Init+0x2e0>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_GPIO_Init+0x2e0>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x2e4>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_GPIO_Init+0x2e8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d019      	beq.n	8001384 <HAL_GPIO_Init+0x1f4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_GPIO_Init+0x2ec>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1f0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_GPIO_Init+0x2f0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a48      	ldr	r2, [pc, #288]	; (8001484 <HAL_GPIO_Init+0x2f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a47      	ldr	r2, [pc, #284]	; (8001488 <HAL_GPIO_Init+0x2f8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001370:	2304      	movs	r3, #4
 8001372:	e008      	b.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001374:	2305      	movs	r3, #5
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001378:	2303      	movs	r3, #3
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x1f6>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001384:	2300      	movs	r3, #0
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001396:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x2e4>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_GPIO_Init+0x2fc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c8:	4a30      	ldr	r2, [pc, #192]	; (800148c <HAL_GPIO_Init+0x2fc>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_GPIO_Init+0x2fc>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_GPIO_Init+0x2fc>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_GPIO_Init+0x2fc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_GPIO_Init+0x2fc>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f47f aea3 	bne.w	80011a8 <HAL_GPIO_Init+0x18>
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40010000 	.word	0x40010000
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	807b      	strh	r3, [r7, #2]
 80014ca:	4613      	mov	r3, r2
 80014cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ce:	787b      	ldrb	r3, [r7, #1]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	041a      	lsls	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f0:	b08b      	sub	sp, #44	; 0x2c
 80014f2:	af06      	add	r7, sp, #24
 80014f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0d0      	b.n	80016a2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f007 f863 	bl	80085e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fdca 	bl	80040c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e04c      	b.n	80015cc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3301      	adds	r3, #1
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	b298      	uxth	r0, r3
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	3336      	adds	r3, #54	; 0x36
 8001570:	4602      	mov	r2, r0
 8001572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3303      	adds	r3, #3
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3338      	adds	r3, #56	; 0x38
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	333c      	adds	r3, #60	; 0x3c
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3340      	adds	r3, #64	; 0x40
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ad      	bcc.n	8001532 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e044      	b.n	8001666 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3301      	adds	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3b5      	bcc.n	80015dc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	687e      	ldr	r6, [r7, #4]
 8001678:	466d      	mov	r5, sp
 800167a:	f106 0410 	add.w	r4, r6, #16
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	602b      	str	r3, [r5, #0]
 8001686:	1d33      	adds	r3, r6, #4
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f002 fd32 	bl	80040f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_Start+0x16>
 80016bc:	2302      	movs	r3, #2
 80016be:	e016      	b.n	80016ee <HAL_PCD_Start+0x44>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fce1 	bl	8004094 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016d2:	2101      	movs	r1, #1
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 ff65 	bl	80085a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 f9c6 	bl	8006a70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f005 f9be 	bl	8006a84 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001712:	d102      	bne.n	800171a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 faf5 	bl	8001d04 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f005 f9b0 	bl	8006a84 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172e:	d112      	bne.n	8001756 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001742:	b292      	uxth	r2, r2
 8001744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f006 ffc4 	bl	80086d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f8c7 	bl	80018e4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f005 f992 	bl	8006a84 <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176a:	d10b      	bne.n	8001784 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800177e:	b292      	uxth	r2, r2
 8001780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f005 f97b 	bl	8006a84 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001798:	d10b      	bne.n	80017b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 f964 	bl	8006a84 <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c6:	d126      	bne.n	8001816 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	b292      	uxth	r2, r2
 80017dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	b292      	uxth	r2, r2
 80017f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 ffa5 	bl	8008748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001810:	b292      	uxth	r2, r2
 8001812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f932 	bl	8006a84 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800182a:	d126      	bne.n	800187a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0208 	orr.w	r2, r2, #8
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0204 	orr.w	r2, r2, #4
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 ff4d 	bl	8008714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f005 f900 	bl	8006a84 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d10e      	bne.n	80018ae <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f006 ff06 	bl	80086ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 f8e6 	bl	8006a84 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c2:	d10b      	bne.n	80018dc <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_SetAddress+0x1a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e013      	b.n	8001926 <HAL_PCD_SetAddress+0x42>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f005 f897 	bl	8006a4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	4608      	mov	r0, r1
 8001938:	4611      	mov	r1, r2
 800193a:	461a      	mov	r2, r3
 800193c:	4603      	mov	r3, r0
 800193e:	70fb      	strb	r3, [r7, #3]
 8001940:	460b      	mov	r3, r1
 8001942:	803b      	strh	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da0e      	bge.n	8001972 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	705a      	strb	r2, [r3, #1]
 8001970:	e00e      	b.n	8001990 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 0207 	and.w	r2, r3, #7
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199c:	883a      	ldrh	r2, [r7, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	78ba      	ldrb	r2, [r7, #2]
 80019a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d102      	bne.n	80019c6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_PCD_EP_Open+0xa6>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e00e      	b.n	80019f2 <HAL_PCD_EP_Open+0xc4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fba6 	bl	8004134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019f0:	7afb      	ldrb	r3, [r7, #11]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0e      	bge.n	8001a2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e00e      	b.n	8001a4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 0207 	and.w	r2, r3, #7
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PCD_EP_Close+0x6a>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e00e      	b.n	8001a82 <HAL_PCD_EP_Close+0x88>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fec8 	bl	8004808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	460b      	mov	r3, r1
 8001a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	f003 0207 	and.w	r2, r3, #7
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f87a 	bl	8004be0 <USB_EPStartXfer>
 8001aec:	e005      	b.n	8001afa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f873 	bl	8004be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f820 	bl	8004be0 <USB_EPStartXfer>
 8001ba0:	e005      	b.n	8001bae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 f819 	bl	8004be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d901      	bls.n	8001bd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e03e      	b.n	8001c54 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da0e      	bge.n	8001bfc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	705a      	strb	r2, [r3, #1]
 8001bfa:	e00c      	b.n	8001c16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_SetStall+0x7e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_SetStall+0x9c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fe03 	bl	8006850 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 020f 	and.w	r2, r3, #15
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d901      	bls.n	8001c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e040      	b.n	8001cfc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da0e      	bge.n	8001ca0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	705a      	strb	r2, [r3, #1]
 8001c9e:	e00e      	b.n	8001cbe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 0207 	and.w	r2, r3, #7
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_EP_ClrStall+0x82>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e00e      	b.n	8001cfc <HAL_PCD_EP_ClrStall+0xa0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fdff 	bl	80068f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d0c:	e2ec      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d16:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 8161 	bne.w	8001ff0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d152      	bne.n	8001dde <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3328      	adds	r3, #40	; 0x28
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	3302      	adds	r3, #2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	441a      	add	r2, r3
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f006 fc71 	bl	8008686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 829b 	beq.w	80022e8 <PCD_EP_ISR_Handler+0x5e4>
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8296 	bne.w	80022e8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ddc:	e284      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d034      	beq.n	8001e62 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3306      	adds	r3, #6
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f004 fe78 	bl	8006b2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e48:	4013      	ands	r3, r2
 8001e4a:	823b      	strh	r3, [r7, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	8a3a      	ldrh	r2, [r7, #16]
 8001e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e56:	b292      	uxth	r2, r2
 8001e58:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f006 fbe6 	bl	800862c <HAL_PCD_SetupStageCallback>
 8001e60:	e242      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f280 823e 	bge.w	80022e8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e78:	4013      	ands	r3, r2
 8001e7a:	83bb      	strh	r3, [r7, #28]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	8bba      	ldrh	r2, [r7, #28]
 8001e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e86:	b292      	uxth	r2, r2
 8001e88:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <PCD_EP_ISR_Handler+0x1ee>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	6959      	ldr	r1, [r3, #20]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f004 fe28 	bl	8006b2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	441a      	add	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f006 fbaf 	bl	8008650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 81f2 	bne.w	80022e8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4413      	add	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <PCD_EP_ISR_Handler+0x24e>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	e02f      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x2ae>
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b3e      	cmp	r3, #62	; 0x3e
 8001f58:	d813      	bhi.n	8001f82 <PCD_EP_ISR_Handler+0x27e>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <PCD_EP_ISR_Handler+0x270>
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	3301      	adds	r3, #1
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e017      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x2ae>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <PCD_EP_ISR_Handler+0x298>
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	827b      	strh	r3, [r7, #18]
 8001fc4:	8a7b      	ldrh	r3, [r7, #18]
 8001fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fca:	827b      	strh	r3, [r7, #18]
 8001fcc:	8a7b      	ldrh	r3, [r7, #18]
 8001fce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fd2:	827b      	strh	r3, [r7, #18]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	8a7b      	ldrh	r3, [r7, #18]
 8001fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	8013      	strh	r3, [r2, #0]
 8001fee:	e17b      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002002:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002006:	2b00      	cmp	r3, #0
 8002008:	f280 80ea 	bge.w	80021e0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29a      	uxth	r2, r3
 800201e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002022:	4013      	ands	r3, r2
 8002024:	853b      	strh	r3, [r7, #40]	; 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	b292      	uxth	r2, r2
 800203c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800203e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d122      	bne.n	80020a2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	3306      	adds	r3, #6
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002084:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8087 	beq.w	800219c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	88da      	ldrh	r2, [r3, #6]
 800209a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209c:	f004 fd46 	bl	8006b2c <USB_ReadPMA>
 80020a0:	e07c      	b.n	800219c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	78db      	ldrb	r3, [r3, #3]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d108      	bne.n	80020bc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ac:	461a      	mov	r2, r3
 80020ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f927 	bl	8002304 <HAL_PCD_EP_DB_Receive>
 80020b6:	4603      	mov	r3, r0
 80020b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020ba:	e06f      	b.n	800219c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d021      	beq.n	800215a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	3302      	adds	r3, #2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02a      	beq.n	800219c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	891a      	ldrh	r2, [r3, #8]
 8002152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002154:	f004 fcea 	bl	8006b2c <USB_ReadPMA>
 8002158:	e020      	b.n	800219c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	3306      	adds	r3, #6
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002182:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	6959      	ldr	r1, [r3, #20]
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	895a      	ldrh	r2, [r3, #10]
 8002196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002198:	f004 fcc8 	bl	8006b2c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a2:	441a      	add	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ae:	441a      	add	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <PCD_EP_ISR_Handler+0x4c2>
 80021bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d206      	bcs.n	80021d4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 fa3f 	bl	8008650 <HAL_PCD_DataOutStageCallback>
 80021d2:	e005      	b.n	80021e0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fd00 	bl	8004be0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07e      	beq.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80021ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	843b      	strh	r3, [r7, #32]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	441a      	add	r2, r3
 8002228:	8c3b      	ldrh	r3, [r7, #32]
 800222a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002232:	b29b      	uxth	r3, r3
 8002234:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	78db      	ldrb	r3, [r3, #3]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d00c      	beq.n	8002258 <PCD_EP_ISR_Handler+0x554>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	78db      	ldrb	r3, [r3, #3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800224a:	2b02      	cmp	r3, #2
 800224c:	d146      	bne.n	80022dc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800224e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d141      	bne.n	80022dc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	3302      	adds	r3, #2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002280:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	8bfb      	ldrh	r3, [r7, #30]
 8002288:	429a      	cmp	r2, r3
 800228a:	d906      	bls.n	800229a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	8bfb      	ldrh	r3, [r7, #30]
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	619a      	str	r2, [r3, #24]
 8002298:	e002      	b.n	80022a0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f006 f9e9 	bl	8008686 <HAL_PCD_DataInStageCallback>
 80022b4:	e018      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	8bfb      	ldrh	r3, [r7, #30]
 80022bc:	441a      	add	r2, r3
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	8bfb      	ldrh	r3, [r7, #30]
 80022c8:	441a      	add	r2, r3
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fc83 	bl	8004be0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022da:	e005      	b.n	80022e8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022de:	461a      	mov	r2, r3
 80022e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f91b 	bl	800251e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f6ff ad0a 	blt.w	8001d0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d07e      	beq.n	800241a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	3302      	adds	r3, #2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002344:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	8b7b      	ldrh	r3, [r7, #26]
 800234c:	429a      	cmp	r2, r3
 800234e:	d306      	bcc.n	800235e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	8b7b      	ldrh	r3, [r7, #26]
 8002356:	1ad2      	subs	r2, r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	e002      	b.n	8002364 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d123      	bne.n	80023b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	833b      	strh	r3, [r7, #24]
 8002388:	8b3b      	ldrh	r3, [r7, #24]
 800238a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800238e:	833b      	strh	r3, [r7, #24]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	8b3b      	ldrh	r3, [r7, #24]
 80023a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01f      	beq.n	80023fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	82fb      	strh	r3, [r7, #22]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	8afb      	ldrh	r3, [r7, #22]
 80023ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023fe:	8b7b      	ldrh	r3, [r7, #26]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8087 	beq.w	8002514 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6959      	ldr	r1, [r3, #20]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	891a      	ldrh	r2, [r3, #8]
 8002412:	8b7b      	ldrh	r3, [r7, #26]
 8002414:	f004 fb8a 	bl	8006b2c <USB_ReadPMA>
 8002418:	e07c      	b.n	8002514 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3306      	adds	r3, #6
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002442:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	8b7b      	ldrh	r3, [r7, #26]
 800244a:	429a      	cmp	r2, r3
 800244c:	d306      	bcc.n	800245c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	8b7b      	ldrh	r3, [r7, #26]
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	619a      	str	r2, [r3, #24]
 800245a:	e002      	b.n	8002462 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d123      	bne.n	80024b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	83fb      	strh	r3, [r7, #30]
 8002486:	8bfb      	ldrh	r3, [r7, #30]
 8002488:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800248c:	83fb      	strh	r3, [r7, #30]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	8bfb      	ldrh	r3, [r7, #30]
 800249e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11f      	bne.n	80024fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	83bb      	strh	r3, [r7, #28]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	8bbb      	ldrh	r3, [r7, #28]
 80024e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024fc:	8b7b      	ldrh	r3, [r7, #26]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6959      	ldr	r1, [r3, #20]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	895a      	ldrh	r2, [r3, #10]
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	f004 fb0c 	bl	8006b2c <USB_ReadPMA>
    }
  }

  return count;
 8002514:	8b7b      	ldrh	r3, [r7, #26]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b0a2      	sub	sp, #136	; 0x88
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 81c7 	beq.w	80028c6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	3302      	adds	r3, #2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002560:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800256c:	429a      	cmp	r2, r3
 800256e:	d907      	bls.n	8002580 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002578:	1ad2      	subs	r2, r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e002      	b.n	8002586 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 80b9 	bne.w	8002702 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d126      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	4413      	add	r3, r2
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	011a      	lsls	r2, r3, #4
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	4413      	add	r3, r2
 80025ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025de:	b29a      	uxth	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	e01a      	b.n	800261c <HAL_PCD_EP_DB_Transmit+0xfe>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	785b      	ldrb	r3, [r3, #1]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d116      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0xfe>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	4413      	add	r3, r2
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	011a      	lsls	r2, r3, #4
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	4413      	add	r3, r2
 8002610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	2200      	movs	r2, #0
 800261a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d126      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x15a>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	011a      	lsls	r2, r3, #4
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002670:	b29a      	uxth	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e017      	b.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d113      	bne.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	4413      	add	r3, r2
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	011a      	lsls	r2, r3, #4
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	4413      	add	r3, r2
 800269c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f005 ffe9 	bl	8008686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 82d4 	beq.w	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	827b      	strh	r3, [r7, #18]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	8a7b      	ldrh	r3, [r7, #18]
 80026ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]
 8002700:	e2b2      	b.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d021      	beq.n	8002750 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	441a      	add	r2, r3
 8002738:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800273c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274c:	b29b      	uxth	r3, r3
 800274e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002756:	2b01      	cmp	r3, #1
 8002758:	f040 8286 	bne.w	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002764:	441a      	add	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002772:	441a      	add	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d309      	bcc.n	8002798 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	621a      	str	r2, [r3, #32]
 8002796:	e015      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80027a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ae:	e009      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d155      	bne.n	8002878 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	4413      	add	r3, r2
 80027e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
 80027f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d112      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0x302>
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002804:	b29a      	uxth	r2, r3
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002818:	b29a      	uxth	r2, r3
 800281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e047      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	2b3e      	cmp	r3, #62	; 0x3e
 8002824:	d811      	bhi.n	800284a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
 800282c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002838:	3301      	adds	r3, #1
 800283a:	64bb      	str	r3, [r7, #72]	; 0x48
 800283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283e:	b29b      	uxth	r3, r3
 8002840:	029b      	lsls	r3, r3, #10
 8002842:	b29a      	uxth	r2, r3
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e032      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x392>
 800284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_PCD_EP_DB_Transmit+0x342>
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285c:	3b01      	subs	r3, #1
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	b29b      	uxth	r3, r3
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	b29b      	uxth	r3, r3
 8002868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002870:	b29a      	uxth	r2, r3
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	801a      	strh	r2, [r3, #0]
 8002876:	e01b      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d117      	bne.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	643b      	str	r3, [r7, #64]	; 0x40
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002894:	4413      	add	r3, r2
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6959      	ldr	r1, [r3, #20]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	891a      	ldrh	r2, [r3, #8]
 80028bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f004 f8ef 	bl	8006aa2 <USB_WritePMA>
 80028c4:	e1d0      	b.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	3306      	adds	r3, #6
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d307      	bcc.n	800290e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	619a      	str	r2, [r3, #24]
 800290c:	e002      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 80c4 	bne.w	8002aa6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d126      	bne.n	8002974 <HAL_PCD_EP_DB_Transmit+0x456>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293a:	4413      	add	r3, r2
 800293c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	011a      	lsls	r2, r3, #4
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	4413      	add	r3, r2
 8002948:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800294c:	66bb      	str	r3, [r7, #104]	; 0x68
 800294e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002958:	b29a      	uxth	r2, r3
 800295a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296c:	b29a      	uxth	r2, r3
 800296e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	e01a      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x48c>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	785b      	ldrb	r3, [r3, #1]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d116      	bne.n	80029aa <HAL_PCD_EP_DB_Transmit+0x48c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	677b      	str	r3, [r7, #116]	; 0x74
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298a:	b29b      	uxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	4413      	add	r3, r2
 8002992:	677b      	str	r3, [r7, #116]	; 0x74
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	011a      	lsls	r2, r3, #4
 800299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299c:	4413      	add	r3, r2
 800299e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a2:	673b      	str	r3, [r7, #112]	; 0x70
 80029a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a6:	2200      	movs	r2, #0
 80029a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d12f      	bne.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d0:	4413      	add	r3, r2
 80029d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	011a      	lsls	r2, r3, #4
 80029dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e0:	4413      	add	r3, r2
 80029e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029fc:	801a      	strh	r2, [r3, #0]
 80029fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	e017      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d113      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2e:	4413      	add	r3, r2
 8002a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	011a      	lsls	r2, r3, #4
 8002a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a44:	2200      	movs	r2, #0
 8002a46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f005 fe19 	bl	8008686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 8104 	bne.w	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8013      	strh	r3, [r2, #0]
 8002aa4:	e0e0      	b.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d121      	bne.n	8002af4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	441a      	add	r2, r3
 8002adc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	f040 80b4 	bne.w	8002c68 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	441a      	add	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b16:	441a      	add	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d309      	bcc.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	621a      	str	r2, [r3, #32]
 8002b3a:	e015      	b.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b52:	e009      	b.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d155      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e044      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002bce:	d811      	bhi.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be2:	3301      	adds	r3, #1
 8002be4:	657b      	str	r3, [r7, #84]	; 0x54
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e02f      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	3b01      	subs	r3, #1
 8002c08:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	e018      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d114      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c38:	4413      	add	r3, r2
 8002c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c52:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6959      	ldr	r1, [r3, #20]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	895a      	ldrh	r2, [r3, #10]
 8002c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f003 ff1d 	bl	8006aa2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c82:	823b      	strh	r3, [r7, #16]
 8002c84:	8a3b      	ldrh	r3, [r7, #16]
 8002c86:	f083 0310 	eor.w	r3, r3, #16
 8002c8a:	823b      	strh	r3, [r7, #16]
 8002c8c:	8a3b      	ldrh	r3, [r7, #16]
 8002c8e:	f083 0320 	eor.w	r3, r3, #32
 8002c92:	823b      	strh	r3, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	8a3b      	ldrh	r3, [r7, #16]
 8002ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3788      	adds	r7, #136	; 0x88
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	817b      	strh	r3, [r7, #10]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cd4:	897b      	ldrh	r3, [r7, #10]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	897b      	ldrh	r3, [r7, #10]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e009      	b.n	8002d0c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cf8:	897a      	ldrh	r2, [r7, #10]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d107      	bne.n	8002d22 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	80da      	strh	r2, [r3, #6]
 8002d20:	e00b      	b.n	8002d3a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2201      	movs	r2, #1
 8002d26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e31d      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4b94      	ldr	r3, [pc, #592]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	4b91      	ldr	r3, [pc, #580]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d07b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d006      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d10f      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5e>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d10b      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8e:	4b87      	ldr	r3, [pc, #540]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d06a      	beq.n	8002e70 <HAL_RCC_OscConfig+0x128>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d166      	bne.n	8002e70 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e2f7      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x74>
 8002dae:	4b7f      	ldr	r3, [pc, #508]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7e      	ldr	r2, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e02d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x96>
 8002dc4:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0xd0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xb8>
 8002de6:	4b71      	ldr	r3, [pc, #452]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a70      	ldr	r2, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6e      	ldr	r3, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6d      	ldr	r2, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd0>
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fde6 	bl	80009f0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fde2 	bl	80009f0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e2ad      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fd fdd2 	bl	80009f0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fdce 	bl	80009f0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e299      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e62:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x108>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d05a      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d119      	bne.n	8002ebe <HAL_RCC_OscConfig+0x176>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x160>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e276      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	493d      	ldr	r1, [pc, #244]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	e03a      	b.n	8002f34 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_RCC_OscConfig+0x268>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fd90 	bl	80009f0 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fd8c 	bl	80009f0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e257      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	492a      	ldr	r1, [pc, #168]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCC_OscConfig+0x268>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd fd6f 	bl	80009f0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fd fd6b 	bl	80009f0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e236      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80b8 	beq.w	80030b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d170      	bne.n	800302a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_OscConfig+0x218>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e21a      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d921      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fc09 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e208      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	4901      	ldr	r1, [pc, #4]	; (8002fac <HAL_RCC_OscConfig+0x264>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
 8002faa:	e020      	b.n	8002fee <HAL_RCC_OscConfig+0x2a6>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb4:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4996      	ldr	r1, [pc, #600]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc6:	4b95      	ldr	r3, [pc, #596]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	4991      	ldr	r1, [pc, #580]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fbd4 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1d3      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	0b5b      	lsrs	r3, r3, #13
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ffe:	4a87      	ldr	r2, [pc, #540]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	0912      	lsrs	r2, r2, #4
 8003004:	f002 020f 	and.w	r2, r2, #15
 8003008:	4985      	ldr	r1, [pc, #532]	; (8003220 <HAL_RCC_OscConfig+0x4d8>)
 800300a:	5c8a      	ldrb	r2, [r1, r2]
 800300c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800300e:	4a85      	ldr	r2, [pc, #532]	; (8003224 <HAL_RCC_OscConfig+0x4dc>)
 8003010:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003012:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_OscConfig+0x4e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fc9e 	bl	8000958 <HAL_InitTick>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d045      	beq.n	80030b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	e1b5      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d029      	beq.n	8003086 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003032:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x4e4>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd fcda 	bl	80009f0 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003040:	f7fd fcd6 	bl	80009f0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1a1      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003052:	4b72      	ldr	r3, [pc, #456]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305e:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	496c      	ldr	r1, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	4967      	ldr	r1, [pc, #412]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
 8003084:	e015      	b.n	80030b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003086:	4b69      	ldr	r3, [pc, #420]	; (800322c <HAL_RCC_OscConfig+0x4e4>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fd fcb0 	bl	80009f0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003094:	f7fd fcac 	bl	80009f0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e177      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d030      	beq.n	8003120 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d016      	beq.n	80030f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fd fc90 	bl	80009f0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fd fc8c 	bl	80009f0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e157      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030e6:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x38c>
 80030f2:	e015      	b.n	8003120 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f4:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fd fc79 	bl	80009f0 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003102:	f7fd fc75 	bl	80009f0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e140      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b5 	beq.w	8003298 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	4a36      	ldr	r2, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6253      	str	r3, [r2, #36]	; 0x24
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x4ec>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x4ec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a32      	ldr	r2, [pc, #200]	; (8003234 <HAL_RCC_OscConfig+0x4ec>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fd fc3d 	bl	80009f0 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fd fc39 	bl	80009f0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e104      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_RCC_OscConfig+0x4ec>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x466>
 80031a0:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6353      	str	r3, [r2, #52]	; 0x34
 80031ac:	e02d      	b.n	800320a <HAL_RCC_OscConfig+0x4c2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x488>
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	6353      	str	r3, [r2, #52]	; 0x34
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031cc:	6353      	str	r3, [r2, #52]	; 0x34
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x4c2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4aa>
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6353      	str	r3, [r2, #52]	; 0x34
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	4a0c      	ldr	r2, [pc, #48]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6353      	str	r3, [r2, #52]	; 0x34
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x4c2>
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	6353      	str	r3, [r2, #52]	; 0x34
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	4a06      	ldr	r2, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x4d4>)
 8003204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003208:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d024      	beq.n	800325c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fd fbed 	bl	80009f0 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003218:	e019      	b.n	800324e <HAL_RCC_OscConfig+0x506>
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	08009214 	.word	0x08009214
 8003224:	20000000 	.word	0x20000000
 8003228:	20000004 	.word	0x20000004
 800322c:	42470020 	.word	0x42470020
 8003230:	42470680 	.word	0x42470680
 8003234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fd fbda 	bl	80009f0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0a3      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCC_OscConfig+0x4f0>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fd fbc8 	bl	80009f0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fd fbc4 	bl	80009f0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e08d      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ee      	bne.n	8003264 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	4a43      	ldr	r2, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b00      	cmp	r3, #0
 800329e:	d079      	beq.n	8003394 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d056      	beq.n	8003354 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d13b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCC_OscConfig+0x65c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fb9c 	bl	80009f0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fb98 	bl	80009f0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e063      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4319      	orrs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	430b      	orrs	r3, r1
 80032f2:	492b      	ldr	r1, [pc, #172]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCC_OscConfig+0x65c>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd fb77 	bl	80009f0 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fd fb73 	bl	80009f0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03e      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x5be>
 8003324:	e036      	b.n	8003394 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x65c>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fb60 	bl	80009f0 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fd fb5c 	bl	80009f0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e027      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x5ec>
 8003352:	e01f      	b.n	8003394 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e01a      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x658>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	429a      	cmp	r2, r3
 8003372:	d10d      	bne.n	8003390 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470060 	.word	0x42470060

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e11a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d919      	bls.n	80033fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_ClockConfig+0x34>
 80033d0:	4b8a      	ldr	r3, [pc, #552]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a89      	ldr	r2, [pc, #548]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 0201 	bic.w	r2, r3, #1
 80033e4:	4985      	ldr	r1, [pc, #532]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ec:	4b83      	ldr	r3, [pc, #524]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0f9      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340a:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	497a      	ldr	r1, [pc, #488]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 808e 	beq.w	8003546 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0d7      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800344a:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d115      	bne.n	8003482 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0cb      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003462:	4b67      	ldr	r3, [pc, #412]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0bf      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0b7      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	495c      	ldr	r1, [pc, #368]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fd faac 	bl	80009f0 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fd faa4 	bl	80009f0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e09b      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ba:	4b51      	ldr	r3, [pc, #324]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xfc>
 80034c6:	e03e      	b.n	8003546 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d112      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fd fa8d 	bl	80009f0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e084      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d1ee      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x12a>
 80034f4:	e027      	b.n	8003546 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d11d      	bne.n	800353a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd fa76 	bl	80009f0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e06d      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_ClockConfig+0x158>
 8003522:	e010      	b.n	8003546 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fd fa64 	bl	80009f0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e05b      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d219      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1be>
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	4923      	ldr	r1, [pc, #140]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e034      	b.n	80035f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4917      	ldr	r1, [pc, #92]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490f      	ldr	r1, [pc, #60]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c6:	f000 f823 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_ClockConfig+0x258>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490b      	ldr	r1, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x264>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd f9b6 	bl	8000958 <HAL_InitTick>
 80035ec:	4603      	mov	r3, r0
 80035ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80035f0:	7afb      	ldrb	r3, [r7, #11]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023c00 	.word	0x40023c00
 8003600:	40023800 	.word	0x40023800
 8003604:	08009214 	.word	0x08009214
 8003608:	20000000 	.word	0x20000000
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003614:	b08e      	sub	sp, #56	; 0x38
 8003616:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_GetSysClockFreq+0x16c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d00d      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x34>
 8003628:	2b0c      	cmp	r3, #12
 800362a:	f200 8092 	bhi.w	8003752 <HAL_RCC_GetSysClockFreq+0x142>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x28>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x2e>
 8003636:	e08c      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCC_GetSysClockFreq+0x170>)
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800363c:	e097      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_RCC_GetSysClockFreq+0x174>)
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003642:	e094      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	0c9b      	lsrs	r3, r3, #18
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4b4e      	ldr	r3, [pc, #312]	; (8003788 <HAL_RCC_GetSysClockFreq+0x178>)
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	0d9b      	lsrs	r3, r3, #22
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_GetSysClockFreq+0x16c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d021      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	2200      	movs	r2, #0
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	61fa      	str	r2, [r7, #28]
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_RCC_GetSysClockFreq+0x174>)
 8003674:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003678:	464a      	mov	r2, r9
 800367a:	fb03 f202 	mul.w	r2, r3, r2
 800367e:	2300      	movs	r3, #0
 8003680:	4644      	mov	r4, r8
 8003682:	fb04 f303 	mul.w	r3, r4, r3
 8003686:	4413      	add	r3, r2
 8003688:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <HAL_RCC_GetSysClockFreq+0x174>)
 800368a:	4644      	mov	r4, r8
 800368c:	fba4 0102 	umull	r0, r1, r4, r2
 8003690:	440b      	add	r3, r1
 8003692:	4619      	mov	r1, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2200      	movs	r2, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	617a      	str	r2, [r7, #20]
 800369c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036a0:	f7fc fd6c 	bl	800017c <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	e04e      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	2200      	movs	r2, #0
 80036b2:	469a      	mov	sl, r3
 80036b4:	4693      	mov	fp, r2
 80036b6:	4652      	mov	r2, sl
 80036b8:	465b      	mov	r3, fp
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	0159      	lsls	r1, r3, #5
 80036c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c8:	0150      	lsls	r0, r2, #5
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	ebb2 080a 	subs.w	r8, r2, sl
 80036d2:	eb63 090b 	sbc.w	r9, r3, fp
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ea:	ebb2 0408 	subs.w	r4, r2, r8
 80036ee:	eb63 0509 	sbc.w	r5, r3, r9
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	00eb      	lsls	r3, r5, #3
 80036fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003700:	00e2      	lsls	r2, r4, #3
 8003702:	4614      	mov	r4, r2
 8003704:	461d      	mov	r5, r3
 8003706:	eb14 030a 	adds.w	r3, r4, sl
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	eb45 030b 	adc.w	r3, r5, fp
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371e:	4629      	mov	r1, r5
 8003720:	028b      	lsls	r3, r1, #10
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	4604      	mov	r4, r0
 8003728:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800372c:	4601      	mov	r1, r0
 800372e:	028a      	lsls	r2, r1, #10
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	2200      	movs	r2, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	60fa      	str	r2, [r7, #12]
 800373c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003740:	f7fc fd1c 	bl	800017c <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003750:	e00d      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCC_GetSysClockFreq+0x16c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0b5b      	lsrs	r3, r3, #13
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	3301      	adds	r3, #1
 8003762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003770:	4618      	mov	r0, r3
 8003772:	3738      	adds	r7, #56	; 0x38
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	00f42400 	.word	0x00f42400
 8003784:	00b71b00 	.word	0x00b71b00
 8003788:	08009208 	.word	0x08009208

0800378c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d12c      	bne.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e016      	b.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6253      	str	r3, [r2, #36]	; 0x24
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037dc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037f0:	d105      	bne.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037f8:	d101      	bne.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037fa:	2301      	movs	r3, #1
 80037fc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 0201 	bic.w	r2, r3, #1
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	40023c00 	.word	0x40023c00

0800384c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06e      	b.n	800393c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386e:	d009      	beq.n	8003884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
 8003876:	e005      	b.n	8003884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc ff72 	bl	8000788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	0c1a      	lsrs	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f002 0204 	and.w	r2, r2, #4
 800392a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_SPI_Transmit+0x22>
 8003962:	2302      	movs	r3, #2
 8003964:	e126      	b.n	8003bb4 <HAL_SPI_Transmit+0x270>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800396e:	f7fd f83f 	bl	80009f0 <HAL_GetTick>
 8003972:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003988:	e10b      	b.n	8003ba2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit+0x52>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800399a:	e102      	b.n	8003ba2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2203      	movs	r2, #3
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e2:	d10f      	bne.n	8003a04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d007      	beq.n	8003a22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d14b      	bne.n	8003ac4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0xf6>
 8003a34:	8afb      	ldrh	r3, [r7, #22]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d13e      	bne.n	8003ab8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	881a      	ldrh	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a5e:	e02b      	b.n	8003ab8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d112      	bne.n	8003a94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a92:	e011      	b.n	8003ab8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a94:	f7fc ffac 	bl	80009f0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d803      	bhi.n	8003aac <HAL_SPI_Transmit+0x168>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d102      	bne.n	8003ab2 <HAL_SPI_Transmit+0x16e>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ab6:	e074      	b.n	8003ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ce      	bne.n	8003a60 <HAL_SPI_Transmit+0x11c>
 8003ac2:	e04c      	b.n	8003b5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_Transmit+0x18e>
 8003acc:	8afb      	ldrh	r3, [r7, #22]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d140      	bne.n	8003b54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003af8:	e02c      	b.n	8003b54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d113      	bne.n	8003b30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b2e:	e011      	b.n	8003b54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b30:	f7fc ff5e 	bl	80009f0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d803      	bhi.n	8003b48 <HAL_SPI_Transmit+0x204>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d102      	bne.n	8003b4e <HAL_SPI_Transmit+0x20a>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b52:	e026      	b.n	8003ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1cd      	bne.n	8003afa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa54 	bl	8004010 <SPI_EndRxTxTransaction>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e000      	b.n	8003ba2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ba0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_TransmitReceive+0x26>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e18a      	b.n	8003ef8 <HAL_SPI_TransmitReceive+0x33c>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bea:	f7fc ff01 	bl	80009f0 <HAL_GetTick>
 8003bee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d00f      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x70>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c12:	d107      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x68>
 8003c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d003      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c2a:	e15b      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x82>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x82>
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c44:	e14e      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d003      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2205      	movs	r2, #5
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	887a      	ldrh	r2, [r7, #2]
 8003c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	887a      	ldrh	r2, [r7, #2]
 8003c82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d007      	beq.n	8003cae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb6:	d178      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x10a>
 8003cc0:	8b7b      	ldrh	r3, [r7, #26]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d166      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cea:	e053      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d11b      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x176>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x176>
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d113      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	881a      	ldrh	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	1c9a      	adds	r2, r3, #2
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d119      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x1b8>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	b292      	uxth	r2, r2
 8003d56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d74:	f7fc fe3c 	bl	80009f0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d807      	bhi.n	8003d94 <HAL_SPI_TransmitReceive+0x1d8>
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d003      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d92:	e0a7      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1a6      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x130>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1a1      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x130>
 8003da8:	e07c      	b.n	8003ea4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x1fc>
 8003db2:	8b7b      	ldrh	r3, [r7, #26]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d16b      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dde:	e057      	b.n	8003e90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d11c      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x26c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x26c>
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d114      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d119      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2ae>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d014      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e66:	2301      	movs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e6a:	f7fc fdc1 	bl	80009f0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d803      	bhi.n	8003e82 <HAL_SPI_TransmitReceive+0x2c6>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d102      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x2cc>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e8e:	e029      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1a2      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x224>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d19d      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f8b1 	bl	8004010 <SPI_EndRxTxTransaction>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ec0:	e010      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	e000      	b.n	8003ee4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3730      	adds	r7, #48	; 0x30
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f10:	f7fc fd6e 	bl	80009f0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f20:	f7fc fd66 	bl	80009f0 <HAL_GetTick>
 8003f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	0d1b      	lsrs	r3, r3, #20
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f36:	e054      	b.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d050      	beq.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f40:	f7fc fd56 	bl	80009f0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d902      	bls.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d13d      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6e:	d111      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f78:	d004      	beq.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d107      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d10f      	bne.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e017      	b.n	8004002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d19b      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000000 	.word	0x20000000

08004010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <SPI_EndRxTxTransaction+0x7c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <SPI_EndRxTxTransaction+0x80>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0d5b      	lsrs	r3, r3, #21
 8004028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d112      	bne.n	8004062 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff ff5a 	bl	8003f00 <SPI_WaitFlagStateUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e00f      	b.n	8004082 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3b01      	subs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d0f2      	beq.n	8004062 <SPI_EndRxTxTransaction+0x52>
 800407c:	e000      	b.n	8004080 <SPI_EndRxTxTransaction+0x70>
        break;
 800407e:	bf00      	nop
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000000 	.word	0x20000000
 8004090:	165e9f81 	.word	0x165e9f81

08004094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4013      	ands	r3, r2
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040f4:	b084      	sub	sp, #16
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	f107 0014 	add.w	r0, r7, #20
 8004102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	b004      	add	sp, #16
 8004132:	4770      	bx	lr

08004134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004134:	b480      	push	{r7}
 8004136:	b09b      	sub	sp, #108	; 0x6c
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d81f      	bhi.n	80041a6 <USB_ActivateEndpoint+0x72>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <USB_ActivateEndpoint+0x38>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004199 	.word	0x08004199
 8004174:	080041af 	.word	0x080041af
 8004178:	0800418b 	.word	0x0800418b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800417c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004188:	e012      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800418a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800418e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004192:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004196:	e00b      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a4:	e004      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041ac:	e000      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>
      break;
 80041ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7b1b      	ldrb	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8149 	bne.w	80044b4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8084 	beq.w	8004334 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	011a      	lsls	r2, r3, #4
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	88db      	ldrh	r3, [r3, #6]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	81fb      	strh	r3, [r7, #14]
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <USB_ActivateEndpoint+0x17c>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	81bb      	strh	r3, [r7, #12]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	89bb      	ldrh	r3, [r7, #12]
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	78db      	ldrb	r3, [r3, #3]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d020      	beq.n	80042fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	813b      	strh	r3, [r7, #8]
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	f083 0320 	eor.w	r3, r3, #32
 80042d6:	813b      	strh	r3, [r7, #8]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
 80042f8:	e27f      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004310:	817b      	strh	r3, [r7, #10]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]
 8004332:	e262      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	4413      	add	r3, r2
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	011a      	lsls	r2, r3, #4
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	4413      	add	r3, r2
 8004352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	88db      	ldrh	r3, [r3, #6]
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	b29b      	uxth	r3, r3
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	4413      	add	r3, r2
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	4413      	add	r3, r2
 8004386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <USB_ActivateEndpoint+0x286>
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e02f      	b.n	800441a <USB_ActivateEndpoint+0x2e6>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b3e      	cmp	r3, #62	; 0x3e
 80043c0:	d813      	bhi.n	80043ea <USB_ActivateEndpoint+0x2b6>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <USB_ActivateEndpoint+0x2a8>
 80043d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d8:	3301      	adds	r3, #1
 80043da:	663b      	str	r3, [r7, #96]	; 0x60
 80043dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e017      	b.n	800441a <USB_ActivateEndpoint+0x2e6>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <USB_ActivateEndpoint+0x2d0>
 80043fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004400:	3b01      	subs	r3, #1
 8004402:	663b      	str	r3, [r7, #96]	; 0x60
 8004404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004406:	b29b      	uxth	r3, r3
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	83fb      	strh	r3, [r7, #30]
 8004428:	8bfb      	ldrh	r3, [r7, #30]
 800442a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01b      	beq.n	800446a <USB_ActivateEndpoint+0x336>
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	83bb      	strh	r3, [r7, #28]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	8bbb      	ldrh	r3, [r7, #28]
 8004456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	837b      	strh	r3, [r7, #26]
 8004482:	8b7b      	ldrh	r3, [r7, #26]
 8004484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004488:	837b      	strh	r3, [r7, #26]
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004490:	837b      	strh	r3, [r7, #26]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8b7b      	ldrh	r3, [r7, #26]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
 80044b2:	e1a2      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	4413      	add	r3, r2
 8004502:	65bb      	str	r3, [r7, #88]	; 0x58
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	011a      	lsls	r2, r3, #4
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	4413      	add	r3, r2
 800450e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	891b      	ldrh	r3, [r3, #8]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004534:	4413      	add	r3, r2
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	4413      	add	r3, r2
 8004542:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	895b      	ldrh	r3, [r3, #10]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	b29b      	uxth	r3, r3
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8091 	bne.w	8004684 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004570:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <USB_ActivateEndpoint+0x47e>
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	441a      	add	r2, r3
 800459c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	873b      	strh	r3, [r7, #56]	; 0x38
 80045c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01b      	beq.n	8004602 <USB_ActivateEndpoint+0x4ce>
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	86bb      	strh	r3, [r7, #52]	; 0x34
 800461a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800461c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004620:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004622:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004628:	86bb      	strh	r3, [r7, #52]	; 0x34
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	867b      	strh	r3, [r7, #50]	; 0x32
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
 8004682:	e0ba      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01d      	beq.n	80046dc <USB_ActivateEndpoint+0x5a8>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01d      	beq.n	8004734 <USB_ActivateEndpoint+0x600>
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	78db      	ldrb	r3, [r3, #3]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d024      	beq.n	8004786 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004756:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800475a:	f083 0320 	eor.w	r3, r3, #32
 800475e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
 8004784:	e01d      	b.n	80047c2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80047fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047fe:	4618      	mov	r0, r3
 8004800:	376c      	adds	r7, #108	; 0x6c
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b08d      	sub	sp, #52	; 0x34
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	7b1b      	ldrb	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 808e 	bne.w	8004938 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d044      	beq.n	80048ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	81bb      	strh	r3, [r7, #12]
 8004832:	89bb      	ldrh	r3, [r7, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <USB_DeactivateEndpoint+0x6c>
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	817b      	strh	r3, [r7, #10]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488a:	813b      	strh	r3, [r7, #8]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
 80048ac:	e192      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	827b      	strh	r3, [r7, #18]
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01b      	beq.n	80048fe <USB_DeactivateEndpoint+0xf6>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	823b      	strh	r3, [r7, #16]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8a3b      	ldrh	r3, [r7, #16]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	81fb      	strh	r3, [r7, #14]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	89fb      	ldrh	r3, [r7, #14]
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]
 8004936:	e14d      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 80a5 	bne.w	8004a8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	843b      	strh	r3, [r7, #32]
 8004950:	8c3b      	ldrh	r3, [r7, #32]
 8004952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01b      	beq.n	8004992 <USB_DeactivateEndpoint+0x18a>
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	83fb      	strh	r3, [r7, #30]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	83bb      	strh	r3, [r7, #28]
 80049a0:	8bbb      	ldrh	r3, [r7, #28]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <USB_DeactivateEndpoint+0x1da>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	837b      	strh	r3, [r7, #26]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8b7b      	ldrh	r3, [r7, #26]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	833b      	strh	r3, [r7, #24]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	8b3b      	ldrh	r3, [r7, #24]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	82fb      	strh	r3, [r7, #22]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a68:	82bb      	strh	r3, [r7, #20]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8abb      	ldrh	r3, [r7, #20]
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
 8004a8a:	e0a3      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <USB_DeactivateEndpoint+0x2d4>
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <USB_DeactivateEndpoint+0x324>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3734      	adds	r7, #52	; 0x34
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0cc      	sub	sp, #304	; 0x130
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bee:	6018      	str	r0, [r3, #0]
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f041 817d 	bne.w	8005f06 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d908      	bls.n	8004c3a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c38:	e007      	b.n	8004c4a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	7b1b      	ldrb	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d152      	bne.n	8004d00 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6959      	ldr	r1, [r3, #20]
 8004c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	88da      	ldrh	r2, [r3, #6]
 8004c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c80:	6800      	ldr	r0, [r0, #0]
 8004c82:	f001 ff0e 	bl	8006aa2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4619      	mov	r1, r3
 8004cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cb8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	011a      	lsls	r2, r3, #4
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	f001 b8b5 	b.w	8005e6a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	f040 84c6 	bne.w	800569e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6a1a      	ldr	r2, [r3, #32]
 8004d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	f240 8443 	bls.w	80055b6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 823e 	beq.w	800524e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dde:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 809a 	bne.w	8004f2c <USB_EPStartXfer+0x34c>
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e04:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e2a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	440a      	add	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	011a      	lsls	r2, r3, #4
 8004e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d122      	bne.n	8004eaa <USB_EPStartXfer+0x2ca>
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e079      	b.n	8004f9e <USB_EPStartXfer+0x3be>
 8004eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eae:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb0:	d81b      	bhi.n	8004eea <USB_EPStartXfer+0x30a>
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <USB_EPStartXfer+0x2f2>
 8004ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	029b      	lsls	r3, r3, #10
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e059      	b.n	8004f9e <USB_EPStartXfer+0x3be>
 8004eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <USB_EPStartXfer+0x32a>
 8004f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e038      	b.n	8004f9e <USB_EPStartXfer+0x3be>
 8004f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d130      	bne.n	8004f9e <USB_EPStartXfer+0x3be>
 8004f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f5a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	440a      	add	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	895b      	ldrh	r3, [r3, #10]
 8004faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6959      	ldr	r1, [r3, #20]
 8004fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f001 fd68 	bl	8006aa2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	441a      	add	r2, r3
 8004fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	429a      	cmp	r2, r3
 800500a:	d90f      	bls.n	800502c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	621a      	str	r2, [r3, #32]
 800502a:	e00e      	b.n	800504a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800503c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 809a 	bne.w	8005190 <USB_EPStartXfer+0x5b0>
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005068:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507e:	b29b      	uxth	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005086:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800508a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800508e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	440a      	add	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	011a      	lsls	r2, r3, #4
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4413      	add	r3, r2
 80050b2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d122      	bne.n	800510e <USB_EPStartXfer+0x52e>
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fe:	b29a      	uxth	r2, r3
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e083      	b.n	8005216 <USB_EPStartXfer+0x636>
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d81b      	bhi.n	800514e <USB_EPStartXfer+0x56e>
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <USB_EPStartXfer+0x556>
 800512c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005130:	3301      	adds	r3, #1
 8005132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29a      	uxth	r2, r3
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e063      	b.n	8005216 <USB_EPStartXfer+0x636>
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <USB_EPStartXfer+0x58e>
 8005164:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005168:	3b01      	subs	r3, #1
 800516a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800516e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005172:	b29b      	uxth	r3, r3
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	b29b      	uxth	r3, r3
 8005178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005180:	b29a      	uxth	r2, r3
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e042      	b.n	8005216 <USB_EPStartXfer+0x636>
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d13a      	bne.n	8005216 <USB_EPStartXfer+0x636>
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	4619      	mov	r1, r3
 80051c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051d2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	440a      	add	r2, r1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	011a      	lsls	r2, r3, #4
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005208:	b29a      	uxth	r2, r3
 800520a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	891b      	ldrh	r3, [r3, #8]
 8005222:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6959      	ldr	r1, [r3, #20]
 8005232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005236:	b29b      	uxth	r3, r3
 8005238:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800523c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005240:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005244:	6800      	ldr	r0, [r0, #0]
 8005246:	f001 fc2c 	bl	8006aa2 <USB_WritePMA>
 800524a:	f000 be0e 	b.w	8005e6a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d16d      	bne.n	800533a <USB_EPStartXfer+0x75a>
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	64bb      	str	r3, [r7, #72]	; 0x48
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527e:	4413      	add	r3, r2
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	011a      	lsls	r2, r3, #4
 8005290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005292:	4413      	add	r3, r2
 8005294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d112      	bne.n	80052c8 <USB_EPStartXfer+0x6e8>
 80052a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e063      	b.n	8005390 <USB_EPStartXfer+0x7b0>
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	2b3e      	cmp	r3, #62	; 0x3e
 80052ce:	d817      	bhi.n	8005300 <USB_EPStartXfer+0x720>
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <USB_EPStartXfer+0x710>
 80052e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052ea:	3301      	adds	r3, #1
 80052ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e047      	b.n	8005390 <USB_EPStartXfer+0x7b0>
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_EPStartXfer+0x740>
 8005316:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800531a:	3b01      	subs	r3, #1
 800531c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005320:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e02a      	b.n	8005390 <USB_EPStartXfer+0x7b0>
 800533a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d122      	bne.n	8005390 <USB_EPStartXfer+0x7b0>
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	653b      	str	r3, [r7, #80]	; 0x50
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536a:	4413      	add	r3, r2
 800536c:	653b      	str	r3, [r7, #80]	; 0x50
 800536e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537e:	4413      	add	r3, r2
 8005380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538a:	b29a      	uxth	r2, r3
 800538c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	891b      	ldrh	r3, [r3, #8]
 800539c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6959      	ldr	r1, [r3, #20]
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	f001 fb6f 	bl	8006aa2 <USB_WritePMA>
            ep->xfer_buff += len;
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d4:	441a      	add	r2, r3
 80053d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d90f      	bls.n	800541e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	621a      	str	r2, [r3, #32]
 800541c:	e00e      	b.n	800543c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	643b      	str	r3, [r7, #64]	; 0x40
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d16d      	bne.n	8005534 <USB_EPStartXfer+0x954>
 8005458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	4413      	add	r3, r2
 800547a:	63bb      	str	r3, [r7, #56]	; 0x38
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	4413      	add	r3, r2
 800548e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
 8005494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d112      	bne.n	80054c2 <USB_EPStartXfer+0x8e2>
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e05d      	b.n	800557e <USB_EPStartXfer+0x99e>
 80054c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c6:	2b3e      	cmp	r3, #62	; 0x3e
 80054c8:	d817      	bhi.n	80054fa <USB_EPStartXfer+0x91a>
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <USB_EPStartXfer+0x90a>
 80054e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054e4:	3301      	adds	r3, #1
 80054e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e041      	b.n	800557e <USB_EPStartXfer+0x99e>
 80054fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <USB_EPStartXfer+0x93a>
 8005510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005514:	3b01      	subs	r3, #1
 8005516:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800551a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e024      	b.n	800557e <USB_EPStartXfer+0x99e>
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d11c      	bne.n	800557e <USB_EPStartXfer+0x99e>
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	4413      	add	r3, r2
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	011a      	lsls	r2, r3, #4
 800556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556c:	4413      	add	r3, r2
 800556e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005578:	b29a      	uxth	r2, r3
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	895b      	ldrh	r3, [r3, #10]
 800558a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055ac:	6800      	ldr	r0, [r0, #0]
 80055ae:	f001 fa78 	bl	8006aa2 <USB_WritePMA>
 80055b2:	f000 bc5a 	b.w	8005e6a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005642:	4413      	add	r3, r2
 8005644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	011a      	lsls	r2, r3, #4
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	4413      	add	r3, r2
 8005658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565c:	65bb      	str	r3, [r7, #88]	; 0x58
 800565e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005662:	b29a      	uxth	r2, r3
 8005664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	891b      	ldrh	r3, [r3, #8]
 8005674:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6959      	ldr	r1, [r3, #20]
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	b29b      	uxth	r3, r3
 800568a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800568e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005692:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005696:	6800      	ldr	r0, [r0, #0]
 8005698:	f001 fa03 	bl	8006aa2 <USB_WritePMA>
 800569c:	e3e5      	b.n	8005e6a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80056e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 81bc 	beq.w	8005ab8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d16d      	bne.n	800583a <USB_EPStartXfer+0xc5a>
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	67bb      	str	r3, [r7, #120]	; 0x78
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	4413      	add	r3, r2
 8005780:	67bb      	str	r3, [r7, #120]	; 0x78
 8005782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	011a      	lsls	r2, r3, #4
 8005790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005792:	4413      	add	r3, r2
 8005794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005798:	677b      	str	r3, [r7, #116]	; 0x74
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d112      	bne.n	80057c8 <USB_EPStartXfer+0xbe8>
 80057a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e060      	b.n	800588a <USB_EPStartXfer+0xcaa>
 80057c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057cc:	2b3e      	cmp	r3, #62	; 0x3e
 80057ce:	d817      	bhi.n	8005800 <USB_EPStartXfer+0xc20>
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <USB_EPStartXfer+0xc10>
 80057e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057ea:	3301      	adds	r3, #1
 80057ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e044      	b.n	800588a <USB_EPStartXfer+0xcaa>
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <USB_EPStartXfer+0xc40>
 8005816:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581a:	3b01      	subs	r3, #1
 800581c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e027      	b.n	800588a <USB_EPStartXfer+0xcaa>
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11f      	bne.n	800588a <USB_EPStartXfer+0xcaa>
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005860:	4413      	add	r3, r2
 8005862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	011a      	lsls	r2, r3, #4
 8005874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005878:	4413      	add	r3, r2
 800587a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800587e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005884:	b29a      	uxth	r2, r3
 8005886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005888:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	895b      	ldrh	r3, [r3, #10]
 8005896:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058b8:	6800      	ldr	r0, [r0, #0]
 80058ba:	f001 f8f2 	bl	8006aa2 <USB_WritePMA>
          ep->xfer_buff += len;
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ce:	441a      	add	r2, r3
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d90f      	bls.n	8005918 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	621a      	str	r2, [r3, #32]
 8005916:	e00e      	b.n	8005936 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8295 	beq.w	8005e6a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d16d      	bne.n	8005a2c <USB_EPStartXfer+0xe4c>
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	66bb      	str	r3, [r7, #104]	; 0x68
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005970:	4413      	add	r3, r2
 8005972:	66bb      	str	r3, [r7, #104]	; 0x68
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	011a      	lsls	r2, r3, #4
 8005982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005984:	4413      	add	r3, r2
 8005986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800598a:	667b      	str	r3, [r7, #100]	; 0x64
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d112      	bne.n	80059ba <USB_EPStartXfer+0xdda>
 8005994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e063      	b.n	8005a82 <USB_EPStartXfer+0xea2>
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	2b3e      	cmp	r3, #62	; 0x3e
 80059c0:	d817      	bhi.n	80059f2 <USB_EPStartXfer+0xe12>
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <USB_EPStartXfer+0xe02>
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059dc:	3301      	adds	r3, #1
 80059de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e047      	b.n	8005a82 <USB_EPStartXfer+0xea2>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_EPStartXfer+0xe32>
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e02a      	b.n	8005a82 <USB_EPStartXfer+0xea2>
 8005a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d122      	bne.n	8005a82 <USB_EPStartXfer+0xea2>
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	673b      	str	r3, [r7, #112]	; 0x70
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a5c:	4413      	add	r3, r2
 8005a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	891b      	ldrh	r3, [r3, #8]
 8005a8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6959      	ldr	r1, [r3, #20]
 8005a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005aa8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005aac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ab0:	6800      	ldr	r0, [r0, #0]
 8005ab2:	f000 fff6 	bl	8006aa2 <USB_WritePMA>
 8005ab6:	e1d8      	b.n	8005e6a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d178      	bne.n	8005bba <USB_EPStartXfer+0xfda>
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aec:	4413      	add	r3, r2
 8005aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	011a      	lsls	r2, r3, #4
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d116      	bne.n	8005b44 <USB_EPStartXfer+0xf64>
 8005b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	e06b      	b.n	8005c1c <USB_EPStartXfer+0x103c>
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b48:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4a:	d818      	bhi.n	8005b7e <USB_EPStartXfer+0xf9e>
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <USB_EPStartXfer+0xf8c>
 8005b62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b66:	3301      	adds	r3, #1
 8005b68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	029b      	lsls	r3, r3, #10
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e04e      	b.n	8005c1c <USB_EPStartXfer+0x103c>
 8005b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <USB_EPStartXfer+0xfbe>
 8005b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	029b      	lsls	r3, r3, #10
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	e030      	b.n	8005c1c <USB_EPStartXfer+0x103c>
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d128      	bne.n	8005c1c <USB_EPStartXfer+0x103c>
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bee:	4413      	add	r3, r2
 8005bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c06:	4413      	add	r3, r2
 8005c08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	891b      	ldrh	r3, [r3, #8]
 8005c28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6959      	ldr	r1, [r3, #20]
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	f000 ff29 	bl	8006aa2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c60:	441a      	add	r2, r3
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d90f      	bls.n	8005caa <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	621a      	str	r2, [r3, #32]
 8005ca8:	e00e      	b.n	8005cc8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80cc 	beq.w	8005e6a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d178      	bne.n	8005de2 <USB_EPStartXfer+0x1202>
 8005cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d14:	4413      	add	r3, r2
 8005d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	011a      	lsls	r2, r3, #4
 8005d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d116      	bne.n	8005d6c <USB_EPStartXfer+0x118c>
 8005d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e064      	b.n	8005e36 <USB_EPStartXfer+0x1256>
 8005d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d70:	2b3e      	cmp	r3, #62	; 0x3e
 8005d72:	d818      	bhi.n	8005da6 <USB_EPStartXfer+0x11c6>
 8005d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <USB_EPStartXfer+0x11b4>
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	e047      	b.n	8005e36 <USB_EPStartXfer+0x1256>
 8005da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <USB_EPStartXfer+0x11e6>
 8005dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e029      	b.n	8005e36 <USB_EPStartXfer+0x1256>
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d121      	bne.n	8005e36 <USB_EPStartXfer+0x1256>
 8005df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e08:	4413      	add	r3, r2
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	011a      	lsls	r2, r3, #4
 8005e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	895b      	ldrh	r3, [r3, #10]
 8005e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6959      	ldr	r1, [r3, #20]
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e64:	6800      	ldr	r0, [r0, #0]
 8005e66:	f000 fe1c 	bl	8006aa2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e8c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e98:	8013      	strh	r3, [r2, #0]
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ea6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eaa:	8812      	ldrh	r2, [r2, #0]
 8005eac:	f082 0210 	eor.w	r2, r2, #16
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ebe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	f082 0220 	eor.w	r2, r2, #32
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
 8005f02:	f000 bc9f 	b.w	8006844 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	7b1b      	ldrb	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 80ae 	bne.w	8006074 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d917      	bls.n	8005f64 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	619a      	str	r2, [r3, #24]
 8005f62:	e00e      	b.n	8005f82 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d116      	bne.n	8005ffe <USB_EPStartXfer+0x141e>
 8005fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e3e8      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	2b3e      	cmp	r3, #62	; 0x3e
 8006004:	d818      	bhi.n	8006038 <USB_EPStartXfer+0x1458>
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <USB_EPStartXfer+0x1446>
 800601c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006020:	3301      	adds	r3, #1
 8006022:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e3cb      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <USB_EPStartXfer+0x1478>
 800604e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006052:	3b01      	subs	r3, #1
 8006054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800605c:	b29b      	uxth	r3, r3
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e3ad      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b02      	cmp	r3, #2
 8006082:	f040 8200 	bne.w	8006486 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 8091 	bne.w	80061ba <USB_EPStartXfer+0x15da>
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060bc:	4413      	add	r3, r2
 80060be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	011a      	lsls	r2, r3, #4
 80060d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <USB_EPStartXfer+0x153c>
 80060ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e083      	b.n	8006224 <USB_EPStartXfer+0x1644>
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b3e      	cmp	r3, #62	; 0x3e
 800612a:	d820      	bhi.n	800616e <USB_EPStartXfer+0x158e>
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800613e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <USB_EPStartXfer+0x157c>
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	3301      	adds	r3, #1
 8006158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	b29b      	uxth	r3, r3
 8006162:	029b      	lsls	r3, r3, #10
 8006164:	b29a      	uxth	r2, r3
 8006166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e05a      	b.n	8006224 <USB_EPStartXfer+0x1644>
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USB_EPStartXfer+0x15be>
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006198:	3b01      	subs	r3, #1
 800619a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800619e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	029b      	lsls	r3, r3, #10
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e034      	b.n	8006224 <USB_EPStartXfer+0x1644>
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d12c      	bne.n	8006224 <USB_EPStartXfer+0x1644>
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ee:	4413      	add	r3, r2
 80061f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006206:	4413      	add	r3, r2
 8006208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	b29a      	uxth	r2, r3
 800621e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8091 	bne.w	8006366 <USB_EPStartXfer+0x1786>
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006268:	4413      	add	r3, r2
 800626a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006280:	4413      	add	r3, r2
 8006282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800628a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d116      	bne.n	80062c8 <USB_EPStartXfer+0x16e8>
 800629a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e07c      	b.n	80063c2 <USB_EPStartXfer+0x17e2>
 80062c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b3e      	cmp	r3, #62	; 0x3e
 80062d6:	d820      	bhi.n	800631a <USB_EPStartXfer+0x173a>
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <USB_EPStartXfer+0x1728>
 80062fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006302:	3301      	adds	r3, #1
 8006304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630c:	b29b      	uxth	r3, r3
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e053      	b.n	80063c2 <USB_EPStartXfer+0x17e2>
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <USB_EPStartXfer+0x176a>
 8006340:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006344:	3b01      	subs	r3, #1
 8006346:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800634a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	e02d      	b.n	80063c2 <USB_EPStartXfer+0x17e2>
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d125      	bne.n	80063c2 <USB_EPStartXfer+0x17e2>
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800638c:	4413      	add	r3, r2
 800638e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	011a      	lsls	r2, r3, #4
 80063a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063c0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 81fe 	beq.w	80067d0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <USB_EPStartXfer+0x182c>
 8006400:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10d      	bne.n	8006428 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800640c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 81db 	bne.w	80067d0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800641a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 81d4 	bne.w	80067d0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]
 8006484:	e1a4      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b01      	cmp	r3, #1
 8006494:	f040 819a 	bne.w	80067cc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d917      	bls.n	80064e4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	619a      	str	r2, [r3, #24]
 80064e2:	e00e      	b.n	8006502 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d178      	bne.n	8006604 <USB_EPStartXfer+0x1a24>
 8006512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006536:	4413      	add	r3, r2
 8006538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800654e:	4413      	add	r3, r2
 8006550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006554:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <USB_EPStartXfer+0x19ae>
 8006560:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800656c:	b29a      	uxth	r2, r3
 800656e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e06b      	b.n	8006666 <USB_EPStartXfer+0x1a86>
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006592:	2b3e      	cmp	r3, #62	; 0x3e
 8006594:	d818      	bhi.n	80065c8 <USB_EPStartXfer+0x19e8>
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <USB_EPStartXfer+0x19d6>
 80065ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b0:	3301      	adds	r3, #1
 80065b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e04e      	b.n	8006666 <USB_EPStartXfer+0x1a86>
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <USB_EPStartXfer+0x1a08>
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	3b01      	subs	r3, #1
 80065e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e030      	b.n	8006666 <USB_EPStartXfer+0x1a86>
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d128      	bne.n	8006666 <USB_EPStartXfer+0x1a86>
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006630:	b29b      	uxth	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	4413      	add	r3, r2
 800663a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	011a      	lsls	r2, r3, #4
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800665a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665e:	b29a      	uxth	r2, r3
 8006660:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d178      	bne.n	8006776 <USB_EPStartXfer+0x1b96>
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a8:	4413      	add	r3, r2
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	011a      	lsls	r2, r3, #4
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c0:	4413      	add	r3, r2
 80066c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <USB_EPStartXfer+0x1b20>
 80066d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e067      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006704:	2b3e      	cmp	r3, #62	; 0x3e
 8006706:	d818      	bhi.n	800673a <USB_EPStartXfer+0x1b5a>
 8006708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <USB_EPStartXfer+0x1b48>
 800671e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006722:	3301      	adds	r3, #1
 8006724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e04a      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
 800673a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <USB_EPStartXfer+0x1b7a>
 8006750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006754:	3b01      	subs	r3, #1
 8006756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800675a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676c:	b29a      	uxth	r2, r3
 800676e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	e02c      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
 8006776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d124      	bne.n	80067d0 <USB_EPStartXfer+0x1bf0>
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679c:	4413      	add	r3, r2
 800679e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	011a      	lsls	r2, r3, #4
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e001      	b.n	80067d0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e03a      	b.n	8006846 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006802:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006806:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800680a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800680e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d020      	beq.n	80068a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	89bb      	ldrh	r3, [r7, #12]
 800687c:	f083 0310 	eor.w	r3, r3, #16
 8006880:	81bb      	strh	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	89bb      	ldrh	r3, [r7, #12]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
 80068a2:	e01f      	b.n	80068e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	81fb      	strh	r3, [r7, #14]
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068c2:	81fb      	strh	r3, [r7, #14]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	7b1b      	ldrb	r3, [r3, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 809d 	bne.w	8006a3e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d04c      	beq.n	80069a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	823b      	strh	r3, [r7, #16]
 800691a:	8a3b      	ldrh	r3, [r7, #16]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <USB_EPClearStall+0x6c>
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	81fb      	strh	r3, [r7, #14]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	89fb      	ldrh	r3, [r7, #14]
 8006948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	78db      	ldrb	r3, [r3, #3]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d06c      	beq.n	8006a3e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697a:	81bb      	strh	r3, [r7, #12]
 800697c:	89bb      	ldrh	r3, [r7, #12]
 800697e:	f083 0320 	eor.w	r3, r3, #32
 8006982:	81bb      	strh	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	89bb      	ldrh	r3, [r7, #12]
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]
 80069a4:	e04b      	b.n	8006a3e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	82fb      	strh	r3, [r7, #22]
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01b      	beq.n	80069f6 <USB_EPClearStall+0x106>
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d4:	82bb      	strh	r3, [r7, #20]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	8abb      	ldrh	r3, [r7, #20]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	827b      	strh	r3, [r7, #18]
 8006a0e:	8a7b      	ldrh	r3, [r7, #18]
 8006a10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a14:	827b      	strh	r3, [r7, #18]
 8006a16:	8a7b      	ldrh	r3, [r7, #18]
 8006a18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a1c:	827b      	strh	r3, [r7, #18]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8a7b      	ldrh	r3, [r7, #18]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	460b      	mov	r3, r1
 8006a54:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2280      	movs	r2, #128	; 0x80
 8006a60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b08d      	sub	sp, #52	; 0x34
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	4611      	mov	r1, r2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	80fb      	strh	r3, [r7, #6]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ab8:	88bb      	ldrh	r3, [r7, #4]
 8006aba:	3301      	adds	r3, #1
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	005a      	lsls	r2, r3, #1
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ada:	e01e      	b.n	8006b1a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	3302      	adds	r3, #2
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	3301      	adds	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	3b01      	subs	r3, #1
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1dd      	bne.n	8006adc <USB_WritePMA+0x3a>
  }
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3734      	adds	r7, #52	; 0x34
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b08b      	sub	sp, #44	; 0x2c
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	80fb      	strh	r3, [r7, #6]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b42:	88bb      	ldrh	r3, [r7, #4]
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
 8006b64:	e01b      	b.n	8006b9e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	3302      	adds	r3, #2
 8006b72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	3302      	adds	r3, #2
 8006b96:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e0      	bne.n	8006b66 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	701a      	strb	r2, [r3, #0]
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	372c      	adds	r7, #44	; 0x2c
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c1b      	ldrb	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d115      	bne.n	8006c0e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be6:	2202      	movs	r2, #2
 8006be8:	2181      	movs	r1, #129	; 0x81
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fe2f 	bl	800884e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 fe25 	bl	800884e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006c0c:	e012      	b.n	8006c34 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c0e:	2340      	movs	r3, #64	; 0x40
 8006c10:	2202      	movs	r2, #2
 8006c12:	2181      	movs	r1, #129	; 0x81
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fe1a 	bl	800884e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	2202      	movs	r2, #2
 8006c24:	2101      	movs	r1, #1
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fe11 	bl	800884e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c34:	2308      	movs	r3, #8
 8006c36:	2203      	movs	r2, #3
 8006c38:	2182      	movs	r1, #130	; 0x82
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fe07 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006c46:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c4a:	f001 ff27 	bl	8008a9c <USBD_static_malloc>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
 8006c64:	e026      	b.n	8006cb4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c6c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	7c1b      	ldrb	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fec7 	bl	8008a30 <USBD_LL_PrepareReceive>
 8006ca2:	e007      	b.n	8006cb4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006caa:	2340      	movs	r3, #64	; 0x40
 8006cac:	2101      	movs	r1, #1
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 febe 	bl	8008a30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cce:	2181      	movs	r1, #129	; 0x81
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fde2 	bl	800889a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fddb 	bl	800889a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cec:	2182      	movs	r1, #130	; 0x82
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fdd3 	bl	800889a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 fecd 	bl	8008ab4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d039      	beq.n	8006dca <USBD_CDC_Setup+0x9e>
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d17f      	bne.n	8006e5a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d029      	beq.n	8006db6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da11      	bge.n	8006d90 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006d78:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	88d2      	ldrh	r2, [r2, #6]
 8006d7e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d80:	6939      	ldr	r1, [r7, #16]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f994 	bl	80080b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006d8e:	e06b      	b.n	8006e68 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	785a      	ldrb	r2, [r3, #1]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006da6:	6939      	ldr	r1, [r7, #16]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f9af 	bl	8008112 <USBD_CtlPrepareRx>
    break;
 8006db4:	e058      	b.n	8006e68 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	7850      	ldrb	r0, [r2, #1]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	4798      	blx	r3
    break;
 8006dc8:	e04e      	b.n	8006e68 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b0b      	cmp	r3, #11
 8006dd0:	d02e      	beq.n	8006e30 <USBD_CDC_Setup+0x104>
 8006dd2:	2b0b      	cmp	r3, #11
 8006dd4:	dc38      	bgt.n	8006e48 <USBD_CDC_Setup+0x11c>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <USBD_CDC_Setup+0xb4>
 8006dda:	2b0a      	cmp	r3, #10
 8006ddc:	d014      	beq.n	8006e08 <USBD_CDC_Setup+0xdc>
 8006dde:	e033      	b.n	8006e48 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d107      	bne.n	8006dfa <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006dea:	f107 030c 	add.w	r3, r7, #12
 8006dee:	2202      	movs	r2, #2
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f95f 	bl	80080b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006df8:	e02e      	b.n	8006e58 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f8f0 	bl	8007fe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e02:	2302      	movs	r3, #2
 8006e04:	75fb      	strb	r3, [r7, #23]
      break;
 8006e06:	e027      	b.n	8006e58 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d107      	bne.n	8006e22 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006e12:	f107 030f 	add.w	r3, r7, #15
 8006e16:	2201      	movs	r2, #1
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 f94b 	bl	80080b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006e20:	e01a      	b.n	8006e58 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f8dc 	bl	8007fe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2e:	e013      	b.n	8006e58 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d00d      	beq.n	8006e56 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f8d0 	bl	8007fe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e46:	e006      	b.n	8006e56 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f8c9 	bl	8007fe2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	e000      	b.n	8006e58 <USBD_CDC_Setup+0x12c>
      break;
 8006e56:	bf00      	nop
    }
    break;
 8006e58:	e006      	b.n	8006e68 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f8c0 	bl	8007fe2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006e62:	2302      	movs	r3, #2
 8006e64:	75fb      	strb	r3, [r7, #23]
    break;
 8006e66:	bf00      	nop
  }

  return ret;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e8c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d03a      	beq.n	8006f0e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	331c      	adds	r3, #28
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d029      	beq.n	8006f02 <USBD_CDC_DataIn+0x90>
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	331c      	adds	r3, #28
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	78f9      	ldrb	r1, [r7, #3]
 8006ec2:	68b8      	ldr	r0, [r7, #8]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4403      	add	r3, r0
 8006ece:	3338      	adds	r3, #56	; 0x38
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	331c      	adds	r3, #28
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006ef4:	78f9      	ldrb	r1, [r7, #3]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fd75 	bl	80089ea <USBD_LL_Transmit>
 8006f00:	e003      	b.n	8006f0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e000      	b.n	8006f10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f0e:	2302      	movs	r3, #2
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fda0 	bl	8008a76 <USBD_LL_GetRxDataSize>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4798      	blx	r3

    return USBD_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f7c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d015      	beq.n	8006fb4 <USBD_CDC_EP0_RxReady+0x46>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f8e:	2bff      	cmp	r3, #255	; 0xff
 8006f90:	d010      	beq.n	8006fb4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	22ff      	movs	r2, #255	; 0xff
 8006fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2243      	movs	r2, #67	; 0x43
 8006fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000094 	.word	0x20000094

08006fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2243      	movs	r2, #67	; 0x43
 8006fec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fee:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000050 	.word	0x20000050

08007000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2243      	movs	r2, #67	; 0x43
 800700c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	200000d8 	.word	0x200000d8

08007020 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	220a      	movs	r2, #10
 800702c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	2000000c 	.word	0x2000000c

08007040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800704a:	2302      	movs	r3, #2
 800704c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007080:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070d2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01c      	beq.n	8007118 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d115      	bne.n	8007114 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007106:	b29b      	uxth	r3, r3
 8007108:	2181      	movs	r1, #129	; 0x81
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fc6d 	bl	80089ea <USBD_LL_Transmit>

      return USBD_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e002      	b.n	800711a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007130:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007138:	2b00      	cmp	r3, #0
 800713a:	d017      	beq.n	800716c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7c1b      	ldrb	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800714a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714e:	2101      	movs	r1, #1
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fc6d 	bl	8008a30 <USBD_LL_PrepareReceive>
 8007156:	e007      	b.n	8007168 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	2101      	movs	r1, #1
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fc64 	bl	8008a30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800716c:	2302      	movs	r3, #2
  }
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800718a:	2302      	movs	r3, #2
 800718c:	e01a      	b.n	80071c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	79fa      	ldrb	r2, [r7, #7]
 80071ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fad1 	bl	8008764 <USBD_LL_Init>

  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d006      	beq.n	80071ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e001      	b.n	80071f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071ee:	2302      	movs	r3, #2
 80071f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fb06 	bl	8008818 <USBD_LL_Start>

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	4611      	mov	r1, r2
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	4611      	mov	r1, r2
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fe62 	bl	8007f6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d016      	beq.n	80072f8 <USBD_LL_SetupStage+0x6a>
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d81c      	bhi.n	8007308 <USBD_LL_SetupStage+0x7a>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <USBD_LL_SetupStage+0x4a>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d008      	beq.n	80072e8 <USBD_LL_SetupStage+0x5a>
 80072d6:	e017      	b.n	8007308 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9c5 	bl	8007670 <USBD_StdDevReq>
    break;
 80072e6:	e01a      	b.n	800731e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fa27 	bl	8007744 <USBD_StdItfReq>
    break;
 80072f6:	e012      	b.n	800731e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fa67 	bl	80077d4 <USBD_StdEPReq>
    break;
 8007306:	e00a      	b.n	800731e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800730e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007312:	b2db      	uxtb	r3, r3
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fade 	bl	80088d8 <USBD_LL_StallEP>
    break;
 800731c:	bf00      	nop
  }

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	460b      	mov	r3, r1
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d14b      	bne.n	80073d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007342:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800734a:	2b03      	cmp	r3, #3
 800734c:	d134      	bne.n	80073b8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	429a      	cmp	r2, r3
 8007358:	d919      	bls.n	800738e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007370:	429a      	cmp	r2, r3
 8007372:	d203      	bcs.n	800737c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007378:	b29b      	uxth	r3, r3
 800737a:	e002      	b.n	8007382 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fee1 	bl	800814e <USBD_CtlContinueRx>
 800738c:	e038      	b.n	8007400 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d105      	bne.n	80073b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fede 	bl	8008172 <USBD_CtlSendStatus>
 80073b6:	e023      	b.n	8007400 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d11e      	bne.n	8007400 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 fa83 	bl	80088d8 <USBD_LL_StallEP>
 80073d2:	e015      	b.n	8007400 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d108      	bne.n	80073fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	7afa      	ldrb	r2, [r7, #11]
 80073f4:	4611      	mov	r1, r2
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	4798      	blx	r3
 80073fa:	e001      	b.n	8007400 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e000      	b.n	8007402 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	460b      	mov	r3, r1
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d17f      	bne.n	800751e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3314      	adds	r3, #20
 8007422:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800742a:	2b02      	cmp	r3, #2
 800742c:	d15c      	bne.n	80074e8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	429a      	cmp	r2, r3
 8007438:	d915      	bls.n	8007466 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fe4b 	bl	80080ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f001 fae6 	bl	8008a30 <USBD_LL_PrepareReceive>
 8007464:	e04e      	b.n	8007504 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	6912      	ldr	r2, [r2, #16]
 800746e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007472:	fb01 f202 	mul.w	r2, r1, r2
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d11c      	bne.n	80074b6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007484:	429a      	cmp	r2, r3
 8007486:	d316      	bcc.n	80074b6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007492:	429a      	cmp	r2, r3
 8007494:	d20f      	bcs.n	80074b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007496:	2200      	movs	r2, #0
 8007498:	2100      	movs	r1, #0
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fe27 	bl	80080ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074a8:	2300      	movs	r3, #0
 80074aa:	2200      	movs	r2, #0
 80074ac:	2100      	movs	r1, #0
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f001 fabe 	bl	8008a30 <USBD_LL_PrepareReceive>
 80074b4:	e026      	b.n	8007504 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d105      	bne.n	80074d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 f9fc 	bl	80088d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fe59 	bl	8008198 <USBD_CtlReceiveStatus>
 80074e6:	e00d      	b.n	8007504 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d004      	beq.n	80074fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f001 f9ea 	bl	80088d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800750a:	2b01      	cmp	r3, #1
 800750c:	d11d      	bne.n	800754a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff fe81 	bl	8007216 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800751c:	e015      	b.n	800754a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007530:	2b03      	cmp	r3, #3
 8007532:	d108      	bne.n	8007546 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	7afa      	ldrb	r2, [r7, #11]
 800753e:	4611      	mov	r1, r2
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	4798      	blx	r3
 8007544:	e001      	b.n	800754a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	e000      	b.n	800754c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	2200      	movs	r2, #0
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f973 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2240      	movs	r2, #64	; 0x40
 8007574:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007578:	2340      	movs	r3, #64	; 0x40
 800757a:	2200      	movs	r2, #0
 800757c:	2180      	movs	r1, #128	; 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f965 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2240      	movs	r2, #64	; 0x40
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d009      	beq.n	80075cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6852      	ldr	r2, [r2, #4]
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
  }

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2204      	movs	r2, #4
 800760c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800764a:	2b03      	cmp	r3, #3
 800764c:	d10b      	bne.n	8007666 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d005      	beq.n	8007696 <USBD_StdDevReq+0x26>
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d84f      	bhi.n	800772e <USBD_StdDevReq+0xbe>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <USBD_StdDevReq+0x36>
 8007692:	2b20      	cmp	r3, #32
 8007694:	d14b      	bne.n	800772e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
    break;
 80076a4:	e048      	b.n	8007738 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d839      	bhi.n	8007722 <USBD_StdDevReq+0xb2>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBD_StdDevReq+0x44>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007705 	.word	0x08007705
 80076b8:	08007719 	.word	0x08007719
 80076bc:	08007723 	.word	0x08007723
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007723 	.word	0x08007723
 80076c8:	080076e7 	.word	0x080076e7
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	08007723 	.word	0x08007723
 80076d4:	080076fb 	.word	0x080076fb
 80076d8:	080076f1 	.word	0x080076f1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9da 	bl	8007a98 <USBD_GetDescriptor>
      break;
 80076e4:	e022      	b.n	800772c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 facf 	bl	8007c8c <USBD_SetAddress>
      break;
 80076ee:	e01d      	b.n	800772c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fb0e 	bl	8007d14 <USBD_SetConfig>
      break;
 80076f8:	e018      	b.n	800772c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fb97 	bl	8007e30 <USBD_GetConfig>
      break;
 8007702:	e013      	b.n	800772c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fbc7 	bl	8007e9a <USBD_GetStatus>
      break;
 800770c:	e00e      	b.n	800772c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fbf5 	bl	8007f00 <USBD_SetFeature>
      break;
 8007716:	e009      	b.n	800772c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc04 	bl	8007f28 <USBD_ClrFeature>
      break;
 8007720:	e004      	b.n	800772c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc5c 	bl	8007fe2 <USBD_CtlError>
      break;
 800772a:	bf00      	nop
    }
    break;
 800772c:	e004      	b.n	8007738 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc56 	bl	8007fe2 <USBD_CtlError>
    break;
 8007736:	bf00      	nop
  }

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop

08007744 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d005      	beq.n	800776a <USBD_StdItfReq+0x26>
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d82e      	bhi.n	80077c0 <USBD_StdItfReq+0x7c>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <USBD_StdItfReq+0x26>
 8007766:	2b20      	cmp	r3, #32
 8007768:	d12a      	bne.n	80077c0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007770:	3b01      	subs	r3, #1
 8007772:	2b02      	cmp	r3, #2
 8007774:	d81d      	bhi.n	80077b2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	889b      	ldrh	r3, [r3, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d813      	bhi.n	80077a8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	88db      	ldrh	r3, [r3, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d110      	bne.n	80077bc <USBD_StdItfReq+0x78>
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fce6 	bl	8008172 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077a6:	e009      	b.n	80077bc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fc19 	bl	8007fe2 <USBD_CtlError>
      break;
 80077b0:	e004      	b.n	80077bc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc14 	bl	8007fe2 <USBD_CtlError>
      break;
 80077ba:	e000      	b.n	80077be <USBD_StdItfReq+0x7a>
      break;
 80077bc:	bf00      	nop
    }
    break;
 80077be:	e004      	b.n	80077ca <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc0d 	bl	8007fe2 <USBD_CtlError>
    break;
 80077c8:	bf00      	nop
  }

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	889b      	ldrh	r3, [r3, #4]
 80077e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d007      	beq.n	8007804 <USBD_StdEPReq+0x30>
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	f200 8144 	bhi.w	8007a82 <USBD_StdEPReq+0x2ae>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <USBD_StdEPReq+0x40>
 80077fe:	2b20      	cmp	r3, #32
 8007800:	f040 813f 	bne.w	8007a82 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
    break;
 8007812:	e13b      	b.n	8007a8c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781c:	2b20      	cmp	r3, #32
 800781e:	d10a      	bne.n	8007836 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	e12b      	b.n	8007a8e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d007      	beq.n	800784e <USBD_StdEPReq+0x7a>
 800783e:	2b03      	cmp	r3, #3
 8007840:	f300 8119 	bgt.w	8007a76 <USBD_StdEPReq+0x2a2>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d072      	beq.n	800792e <USBD_StdEPReq+0x15a>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d03a      	beq.n	80078c2 <USBD_StdEPReq+0xee>
 800784c:	e113      	b.n	8007a76 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007854:	2b02      	cmp	r3, #2
 8007856:	d002      	beq.n	800785e <USBD_StdEPReq+0x8a>
 8007858:	2b03      	cmp	r3, #3
 800785a:	d015      	beq.n	8007888 <USBD_StdEPReq+0xb4>
 800785c:	e02b      	b.n	80078b6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00c      	beq.n	800787e <USBD_StdEPReq+0xaa>
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d009      	beq.n	800787e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 f832 	bl	80088d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007874:	2180      	movs	r1, #128	; 0x80
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 f82e 	bl	80088d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800787c:	e020      	b.n	80078c0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbae 	bl	8007fe2 <USBD_CtlError>
        break;
 8007886:	e01b      	b.n	80078c0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	885b      	ldrh	r3, [r3, #2]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10e      	bne.n	80078ae <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <USBD_StdEPReq+0xda>
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b80      	cmp	r3, #128	; 0x80
 800789a:	d008      	beq.n	80078ae <USBD_StdEPReq+0xda>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	88db      	ldrh	r3, [r3, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f815 	bl	80088d8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fc5f 	bl	8008172 <USBD_CtlSendStatus>

        break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb92 	bl	8007fe2 <USBD_CtlError>
        break;
 80078be:	bf00      	nop
      }
      break;
 80078c0:	e0de      	b.n	8007a80 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d002      	beq.n	80078d2 <USBD_StdEPReq+0xfe>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d015      	beq.n	80078fc <USBD_StdEPReq+0x128>
 80078d0:	e026      	b.n	8007920 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00c      	beq.n	80078f2 <USBD_StdEPReq+0x11e>
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d009      	beq.n	80078f2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fff8 	bl	80088d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80078e8:	2180      	movs	r1, #128	; 0x80
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fff4 	bl	80088d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078f0:	e01c      	b.n	800792c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb74 	bl	8007fe2 <USBD_CtlError>
        break;
 80078fa:	e017      	b.n	800792c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	885b      	ldrh	r3, [r3, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d112      	bne.n	800792a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 ffff 	bl	8008916 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc2a 	bl	8008172 <USBD_CtlSendStatus>
        }
        break;
 800791e:	e004      	b.n	800792a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fb5d 	bl	8007fe2 <USBD_CtlError>
        break;
 8007928:	e000      	b.n	800792c <USBD_StdEPReq+0x158>
        break;
 800792a:	bf00      	nop
      }
      break;
 800792c:	e0a8      	b.n	8007a80 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007934:	2b02      	cmp	r3, #2
 8007936:	d002      	beq.n	800793e <USBD_StdEPReq+0x16a>
 8007938:	2b03      	cmp	r3, #3
 800793a:	d031      	beq.n	80079a0 <USBD_StdEPReq+0x1cc>
 800793c:	e095      	b.n	8007a6a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <USBD_StdEPReq+0x180>
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d004      	beq.n	8007954 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fb48 	bl	8007fe2 <USBD_CtlError>
          break;
 8007952:	e08f      	b.n	8007a74 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da0b      	bge.n	8007974 <USBD_StdEPReq+0x1a0>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	3310      	adds	r3, #16
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	3304      	adds	r3, #4
 8007972:	e00a      	b.n	800798a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2202      	movs	r2, #2
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb8c 	bl	80080b6 <USBD_CtlSendData>
          break;
 800799e:	e069      	b.n	8007a74 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80079a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da11      	bge.n	80079cc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	3318      	adds	r3, #24
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d117      	bne.n	80079f2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb0c 	bl	8007fe2 <USBD_CtlError>
            break;
 80079ca:	e053      	b.n	8007a74 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	f003 020f 	and.w	r2, r3, #15
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 faf9 	bl	8007fe2 <USBD_CtlError>
            break;
 80079f0:	e040      	b.n	8007a74 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da0b      	bge.n	8007a12 <USBD_StdEPReq+0x23e>
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3310      	adds	r3, #16
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	e00a      	b.n	8007a28 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x262>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d103      	bne.n	8007a3e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00e      	b.n	8007a5c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 ff86 	bl	8008954 <USBD_LL_IsStallEP>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e002      	b.n	8007a5c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb27 	bl	80080b6 <USBD_CtlSendData>
          break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fab8 	bl	8007fe2 <USBD_CtlError>
        break;
 8007a72:	bf00      	nop
      }
      break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fab2 	bl	8007fe2 <USBD_CtlError>
      break;
 8007a7e:	bf00      	nop
    }
    break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 faac 	bl	8007fe2 <USBD_CtlError>
    break;
 8007a8a:	bf00      	nop
  }

  return ret;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	2b06      	cmp	r3, #6
 8007aae:	f200 80c9 	bhi.w	8007c44 <USBD_GetDescriptor+0x1ac>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <USBD_GetDescriptor+0x20>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	08007aed 	.word	0x08007aed
 8007ac0:	08007b2d 	.word	0x08007b2d
 8007ac4:	08007c45 	.word	0x08007c45
 8007ac8:	08007c45 	.word	0x08007c45
 8007acc:	08007bf1 	.word	0x08007bf1
 8007ad0:	08007c17 	.word	0x08007c17
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c12      	ldrb	r2, [r2, #16]
 8007ae0:	f107 010a 	add.w	r1, r7, #10
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
    break;
 8007aea:	e0b0      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	7c1b      	ldrb	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10d      	bne.n	8007b10 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f107 020a 	add.w	r2, r7, #10
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b0e:	e09e      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	f107 020a 	add.w	r2, r7, #10
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	2202      	movs	r2, #2
 8007b28:	701a      	strb	r2, [r3, #0]
    break;
 8007b2a:	e090      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d856      	bhi.n	8007be4 <USBD_GetDescriptor+0x14c>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <USBD_GetDescriptor+0xa4>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b55 	.word	0x08007b55
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b85 	.word	0x08007b85
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007bb5 	.word	0x08007bb5
 8007b50:	08007bcd 	.word	0x08007bcd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 010a 	add.w	r1, r7, #10
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
      break;
 8007b6a:	e040      	b.n	8007bee <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 010a 	add.w	r1, r7, #10
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      break;
 8007b82:	e034      	b.n	8007bee <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 010a 	add.w	r1, r7, #10
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
      break;
 8007b9a:	e028      	b.n	8007bee <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 010a 	add.w	r1, r7, #10
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
      break;
 8007bb2:	e01c      	b.n	8007bee <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 010a 	add.w	r1, r7, #10
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
      break;
 8007bca:	e010      	b.n	8007bee <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	7c12      	ldrb	r2, [r2, #16]
 8007bd8:	f107 010a 	add.w	r1, r7, #10
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
      break;
 8007be2:	e004      	b.n	8007bee <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9fb 	bl	8007fe2 <USBD_CtlError>
      return;
 8007bec:	e04b      	b.n	8007c86 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007bee:	e02e      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7c1b      	ldrb	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	f107 020a 	add.w	r2, r7, #10
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
      break;
 8007c0a:	e020      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9e7 	bl	8007fe2 <USBD_CtlError>
      return;
 8007c14:	e037      	b.n	8007c86 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7c1b      	ldrb	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10d      	bne.n	8007c3a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	f107 020a 	add.w	r2, r7, #10
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
 8007c2e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	2207      	movs	r2, #7
 8007c36:	701a      	strb	r2, [r3, #0]
      break;
 8007c38:	e009      	b.n	8007c4e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9d0 	bl	8007fe2 <USBD_CtlError>
      return;
 8007c42:	e020      	b.n	8007c86 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9cb 	bl	8007fe2 <USBD_CtlError>
    return;
 8007c4c:	e01b      	b.n	8007c86 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d011      	beq.n	8007c78 <USBD_GetDescriptor+0x1e0>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00d      	beq.n	8007c78 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	88da      	ldrh	r2, [r3, #6]
 8007c60:	897b      	ldrh	r3, [r7, #10]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bf28      	it	cs
 8007c66:	4613      	movcs	r3, r2
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007c6c:	897b      	ldrh	r3, [r7, #10]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa1f 	bl	80080b6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	88db      	ldrh	r3, [r3, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa76 	bl	8008172 <USBD_CtlSendStatus>
  }
}
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d130      	bne.n	8007d00 <USBD_SetAddress+0x74>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d12c      	bne.n	8007d00 <USBD_SetAddress+0x74>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	885b      	ldrh	r3, [r3, #2]
 8007caa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cac:	d828      	bhi.n	8007d00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d104      	bne.n	8007cce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f98b 	bl	8007fe2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ccc:	e01d      	b.n	8007d0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	7bfa      	ldrb	r2, [r7, #15]
 8007cd2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fe66 	bl	80089ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa46 	bl	8008172 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf4:	e009      	b.n	8007d0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	e004      	b.n	8007d0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f96d 	bl	8007fe2 <USBD_CtlError>
  }
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	4b41      	ldr	r3, [pc, #260]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d28:	4b40      	ldr	r3, [pc, #256]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d904      	bls.n	8007d3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f955 	bl	8007fe2 <USBD_CtlError>
 8007d38:	e075      	b.n	8007e26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d002      	beq.n	8007d4a <USBD_SetConfig+0x36>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d023      	beq.n	8007d90 <USBD_SetConfig+0x7c>
 8007d48:	e062      	b.n	8007e10 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007d4a:	4b38      	ldr	r3, [pc, #224]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01a      	beq.n	8007d88 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007d52:	4b36      	ldr	r3, [pc, #216]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2203      	movs	r2, #3
 8007d60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d64:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fa5d 	bl	800722a <USBD_SetClassConfig>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d104      	bne.n	8007d80 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f932 	bl	8007fe2 <USBD_CtlError>
          return;
 8007d7e:	e052      	b.n	8007e26 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f9f6 	bl	8008172 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d86:	e04e      	b.n	8007e26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9f2 	bl	8008172 <USBD_CtlSendStatus>
      break;
 8007d8e:	e04a      	b.n	8007e26 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d90:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <USBD_SetConfig+0x118>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d112      	bne.n	8007dbe <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007da0:	4b22      	ldr	r3, [pc, #136]	; (8007e2c <USBD_SetConfig+0x118>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007daa:	4b20      	ldr	r3, [pc, #128]	; (8007e2c <USBD_SetConfig+0x118>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fa59 	bl	8007268 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f9db 	bl	8008172 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007dbc:	e033      	b.n	8007e26 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <USBD_SetConfig+0x118>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d01d      	beq.n	8007e08 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fa47 	bl	8007268 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dda:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <USBD_SetConfig+0x118>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fa1d 	bl	800722a <USBD_SetClassConfig>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d104      	bne.n	8007e00 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f8f2 	bl	8007fe2 <USBD_CtlError>
          return;
 8007dfe:	e012      	b.n	8007e26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9b6 	bl	8008172 <USBD_CtlSendStatus>
      break;
 8007e06:	e00e      	b.n	8007e26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9b2 	bl	8008172 <USBD_CtlSendStatus>
      break;
 8007e0e:	e00a      	b.n	8007e26 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8e5 	bl	8007fe2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <USBD_SetConfig+0x118>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fa22 	bl	8007268 <USBD_ClrClassConfig>
      break;
 8007e24:	bf00      	nop
    }
  }
}
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000024c 	.word	0x2000024c

08007e30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88db      	ldrh	r3, [r3, #6]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d004      	beq.n	8007e4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8cc 	bl	8007fe2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007e4a:	e022      	b.n	8007e92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	dc02      	bgt.n	8007e5c <USBD_GetConfig+0x2c>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dc03      	bgt.n	8007e62 <USBD_GetConfig+0x32>
 8007e5a:	e015      	b.n	8007e88 <USBD_GetConfig+0x58>
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetConfig+0x48>
 8007e60:	e012      	b.n	8007e88 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f920 	bl	80080b6 <USBD_CtlSendData>
      break;
 8007e76:	e00c      	b.n	8007e92 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f918 	bl	80080b6 <USBD_CtlSendData>
      break;
 8007e86:	e004      	b.n	8007e92 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f8a9 	bl	8007fe2 <USBD_CtlError>
      break;
 8007e90:	bf00      	nop
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d81e      	bhi.n	8007eee <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	88db      	ldrh	r3, [r3, #6]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d004      	beq.n	8007ec2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f891 	bl	8007fe2 <USBD_CtlError>
      break;
 8007ec0:	e01a      	b.n	8007ef8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f043 0202 	orr.w	r2, r3, #2
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8e5 	bl	80080b6 <USBD_CtlSendData>
    break;
 8007eec:	e004      	b.n	8007ef8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f876 	bl	8007fe2 <USBD_CtlError>
    break;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	885b      	ldrh	r3, [r3, #2]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d106      	bne.n	8007f20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f929 	bl	8008172 <USBD_CtlSendStatus>
  }

}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d80b      	bhi.n	8007f56 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	885b      	ldrh	r3, [r3, #2]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d10c      	bne.n	8007f60 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f90f 	bl	8008172 <USBD_CtlSendStatus>
    }
    break;
 8007f54:	e004      	b.n	8007f60 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f842 	bl	8007fe2 <USBD_CtlError>
    break;
 8007f5e:	e000      	b.n	8007f62 <USBD_ClrFeature+0x3a>
    break;
 8007f60:	bf00      	nop
  }
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	785a      	ldrb	r2, [r3, #1]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	3302      	adds	r3, #2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3303      	adds	r3, #3
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3305      	adds	r3, #5
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	3306      	adds	r3, #6
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	80da      	strh	r2, [r3, #6]

}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007fec:	2180      	movs	r1, #128	; 0x80
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fc72 	bl	80088d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc6e 	bl	80088d8 <USBD_LL_StallEP>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d032      	beq.n	8008080 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f834 	bl	8008088 <USBD_GetLen>
 8008020:	4603      	mov	r3, r0
 8008022:	3301      	adds	r3, #1
 8008024:	b29b      	uxth	r3, r3
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	75fa      	strb	r2, [r7, #23]
 8008034:	461a      	mov	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	7812      	ldrb	r2, [r2, #0]
 800803e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	75fa      	strb	r2, [r7, #23]
 8008046:	461a      	mov	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4413      	add	r3, r2
 800804c:	2203      	movs	r2, #3
 800804e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008050:	e012      	b.n	8008078 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	60fa      	str	r2, [r7, #12]
 8008058:	7dfa      	ldrb	r2, [r7, #23]
 800805a:	1c51      	adds	r1, r2, #1
 800805c:	75f9      	strb	r1, [r7, #23]
 800805e:	4611      	mov	r1, r2
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	440a      	add	r2, r1
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	75fa      	strb	r2, [r7, #23]
 800806e:	461a      	mov	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e8      	bne.n	8008052 <USBD_GetString+0x4e>
    }
  }
}
 8008080:	bf00      	nop
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008094:	e005      	b.n	80080a2 <USBD_GetLen+0x1a>
    {
        len++;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	3301      	adds	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f5      	bne.n	8008096 <USBD_GetLen+0xe>
    }

    return len;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr

080080b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	4613      	mov	r3, r2
 80080c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80080cc:	88fa      	ldrh	r2, [r7, #6]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	2100      	movs	r1, #0
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fc83 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fc71 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2203      	movs	r2, #3
 8008124:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	2100      	movs	r1, #0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fc76 	bl	8008a30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	4613      	mov	r3, r2
 800815a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fc64 	bl	8008a30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2204      	movs	r2, #4
 800817e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008182:	2300      	movs	r3, #0
 8008184:	2200      	movs	r2, #0
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fc2e 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2205      	movs	r2, #5
 80081a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80081a8:	2300      	movs	r3, #0
 80081aa:	2200      	movs	r2, #0
 80081ac:	2100      	movs	r1, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc3e 	bl	8008a30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081c4:	2200      	movs	r2, #0
 80081c6:	4912      	ldr	r1, [pc, #72]	; (8008210 <MX_USB_DEVICE_Init+0x50>)
 80081c8:	4812      	ldr	r0, [pc, #72]	; (8008214 <MX_USB_DEVICE_Init+0x54>)
 80081ca:	f7fe ffd4 	bl	8007176 <USBD_Init>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081d4:	f7f8 fa9e 	bl	8000714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081d8:	490f      	ldr	r1, [pc, #60]	; (8008218 <MX_USB_DEVICE_Init+0x58>)
 80081da:	480e      	ldr	r0, [pc, #56]	; (8008214 <MX_USB_DEVICE_Init+0x54>)
 80081dc:	f7fe fff6 	bl	80071cc <USBD_RegisterClass>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081e6:	f7f8 fa95 	bl	8000714 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081ea:	490c      	ldr	r1, [pc, #48]	; (800821c <MX_USB_DEVICE_Init+0x5c>)
 80081ec:	4809      	ldr	r0, [pc, #36]	; (8008214 <MX_USB_DEVICE_Init+0x54>)
 80081ee:	f7fe ff27 	bl	8007040 <USBD_CDC_RegisterInterface>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081f8:	f7f8 fa8c 	bl	8000714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081fc:	4805      	ldr	r0, [pc, #20]	; (8008214 <MX_USB_DEVICE_Init+0x54>)
 80081fe:	f7fe fffe 	bl	80071fe <USBD_Start>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008208:	f7f8 fa84 	bl	8000714 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800820c:	bf00      	nop
 800820e:	bd80      	pop	{r7, pc}
 8008210:	2000012c 	.word	0x2000012c
 8008214:	20000250 	.word	0x20000250
 8008218:	20000018 	.word	0x20000018
 800821c:	2000011c 	.word	0x2000011c

08008220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008224:	2200      	movs	r2, #0
 8008226:	4905      	ldr	r1, [pc, #20]	; (800823c <CDC_Init_FS+0x1c>)
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <CDC_Init_FS+0x20>)
 800822a:	f7fe ff1f 	bl	800706c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800822e:	4905      	ldr	r1, [pc, #20]	; (8008244 <CDC_Init_FS+0x24>)
 8008230:	4803      	ldr	r0, [pc, #12]	; (8008240 <CDC_Init_FS+0x20>)
 8008232:	f7fe ff34 	bl	800709e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008238:	4618      	mov	r0, r3
 800823a:	bd80      	pop	{r7, pc}
 800823c:	200008ec 	.word	0x200008ec
 8008240:	20000250 	.word	0x20000250
 8008244:	200004ec 	.word	0x200004ec

08008248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800824c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr
	...

08008258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
 8008264:	4613      	mov	r3, r2
 8008266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b23      	cmp	r3, #35	; 0x23
 800826c:	d84a      	bhi.n	8008304 <CDC_Control_FS+0xac>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <CDC_Control_FS+0x1c>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008305 	.word	0x08008305
 8008278:	08008305 	.word	0x08008305
 800827c:	08008305 	.word	0x08008305
 8008280:	08008305 	.word	0x08008305
 8008284:	08008305 	.word	0x08008305
 8008288:	08008305 	.word	0x08008305
 800828c:	08008305 	.word	0x08008305
 8008290:	08008305 	.word	0x08008305
 8008294:	08008305 	.word	0x08008305
 8008298:	08008305 	.word	0x08008305
 800829c:	08008305 	.word	0x08008305
 80082a0:	08008305 	.word	0x08008305
 80082a4:	08008305 	.word	0x08008305
 80082a8:	08008305 	.word	0x08008305
 80082ac:	08008305 	.word	0x08008305
 80082b0:	08008305 	.word	0x08008305
 80082b4:	08008305 	.word	0x08008305
 80082b8:	08008305 	.word	0x08008305
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008305 	.word	0x08008305
 80082c4:	08008305 	.word	0x08008305
 80082c8:	08008305 	.word	0x08008305
 80082cc:	08008305 	.word	0x08008305
 80082d0:	08008305 	.word	0x08008305
 80082d4:	08008305 	.word	0x08008305
 80082d8:	08008305 	.word	0x08008305
 80082dc:	08008305 	.word	0x08008305
 80082e0:	08008305 	.word	0x08008305
 80082e4:	08008305 	.word	0x08008305
 80082e8:	08008305 	.word	0x08008305
 80082ec:	08008305 	.word	0x08008305
 80082f0:	08008305 	.word	0x08008305
 80082f4:	08008305 	.word	0x08008305
 80082f8:	08008305 	.word	0x08008305
 80082fc:	08008305 	.word	0x08008305
 8008300:	08008305 	.word	0x08008305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008304:	bf00      	nop
  }

  return (USBD_OK);
 8008306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4805      	ldr	r0, [pc, #20]	; (8008338 <CDC_Receive_FS+0x24>)
 8008322:	f7fe febc 	bl	800709e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008326:	4804      	ldr	r0, [pc, #16]	; (8008338 <CDC_Receive_FS+0x24>)
 8008328:	f7fe fefb 	bl	8007122 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800832c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000250 	.word	0x20000250

0800833c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <CDC_Transmit_FS+0x48>)
 800834e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800835e:	2301      	movs	r3, #1
 8008360:	e00b      	b.n	800837a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008362:	887b      	ldrh	r3, [r7, #2]
 8008364:	461a      	mov	r2, r3
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4806      	ldr	r0, [pc, #24]	; (8008384 <CDC_Transmit_FS+0x48>)
 800836a:	f7fe fe7f 	bl	800706c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800836e:	4805      	ldr	r0, [pc, #20]	; (8008384 <CDC_Transmit_FS+0x48>)
 8008370:	f7fe fea8 	bl	80070c4 <USBD_CDC_TransmitPacket>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000250 	.word	0x20000250

08008388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2212      	movs	r2, #18
 8008398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000148 	.word	0x20000148

080083ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2204      	movs	r2, #4
 80083bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083be:	4b03      	ldr	r3, [pc, #12]	; (80083cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	2000015c 	.word	0x2000015c

080083d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4907      	ldr	r1, [pc, #28]	; (8008404 <USBD_FS_ProductStrDescriptor+0x34>)
 80083e6:	4808      	ldr	r0, [pc, #32]	; (8008408 <USBD_FS_ProductStrDescriptor+0x38>)
 80083e8:	f7ff fe0c 	bl	8008004 <USBD_GetString>
 80083ec:	e004      	b.n	80083f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	4904      	ldr	r1, [pc, #16]	; (8008404 <USBD_FS_ProductStrDescriptor+0x34>)
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <USBD_FS_ProductStrDescriptor+0x38>)
 80083f4:	f7ff fe06 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000cec 	.word	0x20000cec
 8008408:	080091c0 	.word	0x080091c0

0800840c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	4904      	ldr	r1, [pc, #16]	; (800842c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800841c:	4804      	ldr	r0, [pc, #16]	; (8008430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800841e:	f7ff fdf1 	bl	8008004 <USBD_GetString>
  return USBD_StrDesc;
 8008422:	4b02      	ldr	r3, [pc, #8]	; (800842c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000cec 	.word	0x20000cec
 8008430:	080091d8 	.word	0x080091d8

08008434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	221a      	movs	r2, #26
 8008444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008446:	f000 f843 	bl	80084d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800844a:	4b02      	ldr	r3, [pc, #8]	; (8008454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000160 	.word	0x20000160

08008458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d105      	bne.n	8008476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4907      	ldr	r1, [pc, #28]	; (800848c <USBD_FS_ConfigStrDescriptor+0x34>)
 800846e:	4808      	ldr	r0, [pc, #32]	; (8008490 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008470:	f7ff fdc8 	bl	8008004 <USBD_GetString>
 8008474:	e004      	b.n	8008480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	4904      	ldr	r1, [pc, #16]	; (800848c <USBD_FS_ConfigStrDescriptor+0x34>)
 800847a:	4805      	ldr	r0, [pc, #20]	; (8008490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800847c:	f7ff fdc2 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000cec 	.word	0x20000cec
 8008490:	080091ec 	.word	0x080091ec

08008494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4907      	ldr	r1, [pc, #28]	; (80084c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084aa:	4808      	ldr	r0, [pc, #32]	; (80084cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084ac:	f7ff fdaa 	bl	8008004 <USBD_GetString>
 80084b0:	e004      	b.n	80084bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	4904      	ldr	r1, [pc, #16]	; (80084c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084b6:	4805      	ldr	r0, [pc, #20]	; (80084cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084b8:	f7ff fda4 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000cec 	.word	0x20000cec
 80084cc:	080091f8 	.word	0x080091f8

080084d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <Get_SerialNum+0x44>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <Get_SerialNum+0x48>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084e2:	4b0e      	ldr	r3, [pc, #56]	; (800851c <Get_SerialNum+0x4c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084f6:	2208      	movs	r2, #8
 80084f8:	4909      	ldr	r1, [pc, #36]	; (8008520 <Get_SerialNum+0x50>)
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f814 	bl	8008528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008500:	2204      	movs	r2, #4
 8008502:	4908      	ldr	r1, [pc, #32]	; (8008524 <Get_SerialNum+0x54>)
 8008504:	68b8      	ldr	r0, [r7, #8]
 8008506:	f000 f80f 	bl	8008528 <IntToUnicode>
  }
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	1ff80050 	.word	0x1ff80050
 8008518:	1ff80054 	.word	0x1ff80054
 800851c:	1ff80058 	.word	0x1ff80058
 8008520:	20000162 	.word	0x20000162
 8008524:	20000172 	.word	0x20000172

08008528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e027      	b.n	8008590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	0f1b      	lsrs	r3, r3, #28
 8008544:	2b09      	cmp	r3, #9
 8008546:	d80b      	bhi.n	8008560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	0f1b      	lsrs	r3, r3, #28
 800854c:	b2da      	uxtb	r2, r3
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4619      	mov	r1, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	440b      	add	r3, r1
 8008558:	3230      	adds	r2, #48	; 0x30
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e00a      	b.n	8008576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	0f1b      	lsrs	r3, r3, #28
 8008564:	b2da      	uxtb	r2, r3
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4619      	mov	r1, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	440b      	add	r3, r1
 8008570:	3237      	adds	r2, #55	; 0x37
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	3301      	adds	r3, #1
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	3301      	adds	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
 8008590:	7dfa      	ldrb	r2, [r7, #23]
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	429a      	cmp	r2, r3
 8008596:	d3d3      	bcc.n	8008540 <IntToUnicode+0x18>
  }
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc80      	pop	{r7}
 80085a2:	4770      	bx	lr

080085a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d106      	bne.n	80085c4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <HAL_PCDEx_SetConnectionState+0x38>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4a08      	ldr	r2, [pc, #32]	; (80085dc <HAL_PCDEx_SetConnectionState+0x38>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80085c2:	e005      	b.n	80085d0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_PCDEx_SetConnectionState+0x38>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4a04      	ldr	r2, [pc, #16]	; (80085dc <HAL_PCDEx_SetConnectionState+0x38>)
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	6053      	str	r3, [r2, #4]
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000

080085e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <HAL_PCD_MspInit+0x44>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d113      	bne.n	800861a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <HAL_PCD_MspInit+0x48>)
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <HAL_PCD_MspInit+0x48>)
 80085f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085fc:	6253      	str	r3, [r2, #36]	; 0x24
 80085fe:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <HAL_PCD_MspInit+0x48>)
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800860a:	2200      	movs	r2, #0
 800860c:	2100      	movs	r1, #0
 800860e:	2014      	movs	r0, #20
 8008610:	f7f8 fd87 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008614:	2014      	movs	r0, #20
 8008616:	f7f8 fda0 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40005c00 	.word	0x40005c00
 8008628:	40023800 	.word	0x40023800

0800862c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fe fe23 	bl	800728e <USBD_LL_SetupStage>
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	440b      	add	r3, r1
 8008670:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	4619      	mov	r1, r3
 800867a:	f7fe fe55 	bl	8007328 <USBD_LL_DataOutStage>
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	440b      	add	r3, r1
 80086a6:	333c      	adds	r3, #60	; 0x3c
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	4619      	mov	r1, r3
 80086ae:	f7fe feac 	bl	800740a <USBD_LL_DataInStage>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe ffb7 	bl	800763c <USBD_LL_SOF>
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086de:	2301      	movs	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d001      	beq.n	80086ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086ea:	f7f8 f813 	bl	8000714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086f4:	7bfa      	ldrb	r2, [r7, #15]
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ff6c 	bl	80075d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe ff25 	bl	8007554 <USBD_LL_Reset>
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ff66 	bl	80075f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <HAL_PCD_SuspendCallback+0x30>)
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	4a03      	ldr	r2, [pc, #12]	; (8008744 <HAL_PCD_SuspendCallback+0x30>)
 8008736:	f043 0306 	orr.w	r3, r3, #6
 800873a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	e000ed00 	.word	0xe000ed00

08008748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ff60 	bl	800761c <USBD_LL_Resume>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800876c:	4a28      	ldr	r2, [pc, #160]	; (8008810 <USBD_LL_Init+0xac>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a26      	ldr	r2, [pc, #152]	; (8008810 <USBD_LL_Init+0xac>)
 8008778:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800877c:	4b24      	ldr	r3, [pc, #144]	; (8008810 <USBD_LL_Init+0xac>)
 800877e:	4a25      	ldr	r2, [pc, #148]	; (8008814 <USBD_LL_Init+0xb0>)
 8008780:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008782:	4b23      	ldr	r3, [pc, #140]	; (8008810 <USBD_LL_Init+0xac>)
 8008784:	2208      	movs	r2, #8
 8008786:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008788:	4b21      	ldr	r3, [pc, #132]	; (8008810 <USBD_LL_Init+0xac>)
 800878a:	2202      	movs	r2, #2
 800878c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800878e:	4b20      	ldr	r3, [pc, #128]	; (8008810 <USBD_LL_Init+0xac>)
 8008790:	2202      	movs	r2, #2
 8008792:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <USBD_LL_Init+0xac>)
 8008796:	2200      	movs	r2, #0
 8008798:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800879a:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <USBD_LL_Init+0xac>)
 800879c:	2200      	movs	r2, #0
 800879e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087a0:	481b      	ldr	r0, [pc, #108]	; (8008810 <USBD_LL_Init+0xac>)
 80087a2:	f7f8 fea4 	bl	80014ee <HAL_PCD_Init>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087ac:	f7f7 ffb2 	bl	8000714 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087b6:	2318      	movs	r3, #24
 80087b8:	2200      	movs	r2, #0
 80087ba:	2100      	movs	r1, #0
 80087bc:	f7fa fa81 	bl	8002cc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087c6:	2358      	movs	r3, #88	; 0x58
 80087c8:	2200      	movs	r2, #0
 80087ca:	2180      	movs	r1, #128	; 0x80
 80087cc:	f7fa fa79 	bl	8002cc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087d6:	23c0      	movs	r3, #192	; 0xc0
 80087d8:	2200      	movs	r2, #0
 80087da:	2181      	movs	r1, #129	; 0x81
 80087dc:	f7fa fa71 	bl	8002cc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087ea:	2200      	movs	r2, #0
 80087ec:	2101      	movs	r1, #1
 80087ee:	f7fa fa68 	bl	8002cc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fc:	2200      	movs	r2, #0
 80087fe:	2182      	movs	r1, #130	; 0x82
 8008800:	f7fa fa5f 	bl	8002cc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000eec 	.word	0x20000eec
 8008814:	40005c00 	.word	0x40005c00

08008818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800882e:	4618      	mov	r0, r3
 8008830:	f7f8 ff3b 	bl	80016aa <HAL_PCD_Start>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f944 	bl	8008ac8 <USBD_Get_USB_Status>
 8008840:	4603      	mov	r3, r0
 8008842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008844:	7bbb      	ldrb	r3, [r7, #14]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	4608      	mov	r0, r1
 8008858:	4611      	mov	r1, r2
 800885a:	461a      	mov	r2, r3
 800885c:	4603      	mov	r3, r0
 800885e:	70fb      	strb	r3, [r7, #3]
 8008860:	460b      	mov	r3, r1
 8008862:	70bb      	strb	r3, [r7, #2]
 8008864:	4613      	mov	r3, r2
 8008866:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008876:	78bb      	ldrb	r3, [r7, #2]
 8008878:	883a      	ldrh	r2, [r7, #0]
 800887a:	78f9      	ldrb	r1, [r7, #3]
 800887c:	f7f9 f857 	bl	800192e <HAL_PCD_EP_Open>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f91e 	bl	8008ac8 <USBD_Get_USB_Status>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008890:	7bbb      	ldrb	r3, [r7, #14]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f9 f89e 	bl	80019fa <HAL_PCD_EP_Close>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8ff 	bl	8008ac8 <USBD_Get_USB_Status>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f9 f95e 	bl	8001bb8 <HAL_PCD_EP_SetStall>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f8e0 	bl	8008ac8 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7f9 f991 	bl	8001c5c <HAL_PCD_EP_ClrStall>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f8c1 	bl	8008ac8 <USBD_Get_USB_Status>
 8008946:	4603      	mov	r3, r0
 8008948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894a:	7bbb      	ldrb	r3, [r7, #14]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008966:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	da0c      	bge.n	800898a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	440b      	add	r3, r1
 8008984:	3302      	adds	r3, #2
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	e00b      	b.n	80089a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f8 ff8a 	bl	80018e4 <HAL_PCD_SetAddress>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f876 	bl	8008ac8 <USBD_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	461a      	mov	r2, r3
 80089f6:	460b      	mov	r3, r1
 80089f8:	72fb      	strb	r3, [r7, #11]
 80089fa:	4613      	mov	r3, r2
 80089fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a0c:	893b      	ldrh	r3, [r7, #8]
 8008a0e:	7af9      	ldrb	r1, [r7, #11]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	f7f9 f88e 	bl	8001b32 <HAL_PCD_EP_Transmit>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f853 	bl	8008ac8 <USBD_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	72fb      	strb	r3, [r7, #11]
 8008a40:	4613      	mov	r3, r2
 8008a42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a52:	893b      	ldrh	r3, [r7, #8]
 8008a54:	7af9      	ldrb	r1, [r7, #11]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f7f9 f817 	bl	8001a8a <HAL_PCD_EP_Receive>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f830 	bl	8008ac8 <USBD_Get_USB_Status>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f9 f839 	bl	8001b04 <HAL_PCD_EP_GetRxCount>
 8008a92:	4603      	mov	r3, r0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <USBD_static_malloc+0x14>)
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr
 8008ab0:	200011d8 	.word	0x200011d8

08008ab4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d817      	bhi.n	8008b0c <USBD_Get_USB_Status+0x44>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <USBD_Get_USB_Status+0x1c>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008afb 	.word	0x08008afb
 8008aec:	08008b01 	.word	0x08008b01
 8008af0:	08008b07 	.word	0x08008b07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
    break;
 8008af8:	e00b      	b.n	8008b12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	73fb      	strb	r3, [r7, #15]
    break;
 8008afe:	e008      	b.n	8008b12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
    break;
 8008b04:	e005      	b.n	8008b12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b06:	2302      	movs	r3, #2
 8008b08:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0a:	e002      	b.n	8008b12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b10:	bf00      	nop
  }
  return usb_status;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop

08008b20 <usb_callback>:
// USB Receive logic
/////////////////////////////////////////////////////////////////////////////////



void usb_callback(uint8_t *arr, uint16_t len){
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	807b      	strh	r3, [r7, #2]


	////////////
	// DEV INFO
	// (STANDART COMMAND)
	if(arr[0] == 0 ){
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d127      	bne.n	8008b84 <usb_callback+0x64>
		uint8_t cmd_count = arr[1];
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	77fb      	strb	r3, [r7, #31]
		uint16_t *idBase0 = (uint16_t*)(UID_BASE);
 8008b3a:	4b1f      	ldr	r3, [pc, #124]	; (8008bb8 <usb_callback+0x98>)
 8008b3c:	61bb      	str	r3, [r7, #24]
		uint16_t *idBase1 = (uint16_t*)(UID_BASE + 0x02);
 8008b3e:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <usb_callback+0x9c>)
 8008b40:	617b      	str	r3, [r7, #20]
		uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
 8008b42:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <usb_callback+0xa0>)
 8008b44:	613b      	str	r3, [r7, #16]
		uint32_t *idBase3 = (uint32_t*)(UID_BASE + 0x08);
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <usb_callback+0xa4>)
 8008b48:	60fb      	str	r3, [r7, #12]

		usb_rst_cursor();
 8008b4a:	f000 fa5f 	bl	800900c <usb_rst_cursor>
		usb_add_uint8(0x00);
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f000 f99e 	bl	8008e90 <usb_add_uint8>
		usb_add_uint8(cmd_count);
 8008b54:	7ffb      	ldrb	r3, [r7, #31]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f99a 	bl	8008e90 <usb_add_uint8>
		usb_add_uint16(idBase0);
 8008b5c:	69b8      	ldr	r0, [r7, #24]
 8008b5e:	f000 f9bb 	bl	8008ed8 <usb_add_uint16>
		usb_add_uint16(idBase1);
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f000 f9b8 	bl	8008ed8 <usb_add_uint16>
		usb_add_uint32(idBase2);
 8008b68:	6938      	ldr	r0, [r7, #16]
 8008b6a:	f000 f9ef 	bl	8008f4c <usb_add_uint32>
		usb_add_uint32(idBase3);
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 f9ec 	bl	8008f4c <usb_add_uint32>

		usb_add_uint16((uint8_t)DEVICE_CODE);
 8008b74:	2001      	movs	r0, #1
 8008b76:	f000 f9af 	bl	8008ed8 <usb_add_uint16>
		usb_add_uint8((uint8_t)DEVICE_VER);
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f000 f988 	bl	8008e90 <usb_add_uint8>

		usb_send_buff();
 8008b80:	f000 fa50 	bl	8009024 <usb_send_buff>

	}


	////////////////cmd
	if(arr[0] == 1 ){
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d110      	bne.n	8008bae <usb_callback+0x8e>
		uint8_t cmd_count = arr[1];
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	72fb      	strb	r3, [r7, #11]
//		}
//
//		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
//		HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data, 9*8);
//
		usb_rst_cursor();
 8008b92:	f000 fa3b 	bl	800900c <usb_rst_cursor>
		usb_add_uint8(0x01);
 8008b96:	2001      	movs	r0, #1
 8008b98:	f000 f97a 	bl	8008e90 <usb_add_uint8>
		usb_add_uint8(cmd_count);
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f976 	bl	8008e90 <usb_add_uint8>
		usb_add_uint8(0);
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f000 f973 	bl	8008e90 <usb_add_uint8>
//
		usb_send_buff();
 8008baa:	f000 fa3b 	bl	8009024 <usb_send_buff>
	}


}
 8008bae:	bf00      	nop
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	1ff80050 	.word	0x1ff80050
 8008bbc:	1ff80052 	.word	0x1ff80052
 8008bc0:	1ff80054 	.word	0x1ff80054
 8008bc4:	1ff80058 	.word	0x1ff80058

08008bc8 <kernel_init>:
/////////////////////////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////////////////////////


void kernel_init() {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0

    //////////////////////////////////
    // Hardware Check

	HAL_Delay(2000);
 8008bcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008bd0:	f7f7 ff18 	bl	8000a04 <HAL_Delay>
	HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008bda:	4802      	ldr	r0, [pc, #8]	; (8008be4 <kernel_init+0x1c>)
 8008bdc:	f7f8 fc6f 	bl	80014be <HAL_GPIO_WritePin>

}
 8008be0:	bf00      	nop
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	40020800 	.word	0x40020800

08008be8 <kernel_main>:
// MAIN
/////////////////////////////////////////////////////////////////////////////////



void kernel_main() {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b098      	sub	sp, #96	; 0x60
 8008bec:	af02      	add	r7, sp, #8
	usb_set_callback(&usb_callback);
 8008bee:	48a3      	ldr	r0, [pc, #652]	; (8008e7c <kernel_main+0x294>)
 8008bf0:	f000 faa0 	bl	8009134 <usb_set_callback>
	kernel_init();
 8008bf4:	f7ff ffe8 	bl	8008bc8 <kernel_init>
	//RESET (0000 011x)
	//START/SYNC (0000 100x)
	//RDATA (0001 xxxx)
	//RREG (0010 rrnn)
	//WREG (0100 rrnn)
	uint8_t RESET = 0b00000110;
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t START = 0b00001000;
 8008bfe:	2308      	movs	r3, #8
 8008c00:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t RDATA = 0b00010000;
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	uint8_t RREG  = 0b00100000;
 8008c0a:	2320      	movs	r3, #32
 8008c0c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t WREG  = 0b01000000;
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	uint8_t cmd = 0b00000110;
 8008c16:	2306      	movs	r3, #6
 8008c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//reset
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c22:	4897      	ldr	r0, [pc, #604]	; (8008e80 <kernel_main+0x298>)
 8008c24:	f7f8 fc4b 	bl	80014be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008c28:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c30:	2201      	movs	r2, #1
 8008c32:	4894      	ldr	r0, [pc, #592]	; (8008e84 <kernel_main+0x29c>)
 8008c34:	f7fa fe86 	bl	8003944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 1);
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c3e:	4890      	ldr	r0, [pc, #576]	; (8008e80 <kernel_main+0x298>)
 8008c40:	f7f8 fc3d 	bl	80014be <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8008c44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c48:	f7f7 fedc 	bl	8000a04 <HAL_Delay>


	//conf


	uint8_t MUX = 0b0011;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t GAIN = 0b111;
 8008c52:	2307      	movs	r3, #7
 8008c54:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	uint8_t param[4] ={(MUX<<4) | (GAIN<<1) | (0b0), 0b00000000, 0b10011000, 0b00000000};
 8008c58:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	b25a      	sxtb	r2, r3
 8008c60:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	b25b      	sxtb	r3, r3
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008c78:	2398      	movs	r3, #152	; 0x98
 8008c7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	cmd = WREG | 0b00<<2 | 0b01;
 8008c84:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008c92:	2200      	movs	r2, #0
 8008c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c98:	4879      	ldr	r0, [pc, #484]	; (8008e80 <kernel_main+0x298>)
 8008c9a:	f7f8 fc10 	bl	80014be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008c9e:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4876      	ldr	r0, [pc, #472]	; (8008e84 <kernel_main+0x29c>)
 8008caa:	f7fa fe4b 	bl	8003944 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &param[0], 1, 1000);
 8008cae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4872      	ldr	r0, [pc, #456]	; (8008e84 <kernel_main+0x29c>)
 8008cba:	f7fa fe43 	bl	8003944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 1);
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cc4:	486e      	ldr	r0, [pc, #440]	; (8008e80 <kernel_main+0x298>)
 8008cc6:	f7f8 fbfa 	bl	80014be <HAL_GPIO_WritePin>

	cmd = WREG | 0b01<<2 | 0b01;
 8008cca:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008cce:	f043 0305 	orr.w	r3, r3, #5
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cde:	4868      	ldr	r0, [pc, #416]	; (8008e80 <kernel_main+0x298>)
 8008ce0:	f7f8 fbed 	bl	80014be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008ce4:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cec:	2201      	movs	r2, #1
 8008cee:	4865      	ldr	r0, [pc, #404]	; (8008e84 <kernel_main+0x29c>)
 8008cf0:	f7fa fe28 	bl	8003944 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &param[1], 1, 1000);
 8008cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cf8:	1c59      	adds	r1, r3, #1
 8008cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4860      	ldr	r0, [pc, #384]	; (8008e84 <kernel_main+0x29c>)
 8008d02:	f7fa fe1f 	bl	8003944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 1);
 8008d06:	2201      	movs	r2, #1
 8008d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d0c:	485c      	ldr	r0, [pc, #368]	; (8008e80 <kernel_main+0x298>)
 8008d0e:	f7f8 fbd6 	bl	80014be <HAL_GPIO_WritePin>

	cmd = WREG | 0b10<<2 | 0b01;
 8008d12:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008d16:	f043 0309 	orr.w	r3, r3, #9
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d26:	4856      	ldr	r0, [pc, #344]	; (8008e80 <kernel_main+0x298>)
 8008d28:	f7f8 fbc9 	bl	80014be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008d2c:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d34:	2201      	movs	r2, #1
 8008d36:	4853      	ldr	r0, [pc, #332]	; (8008e84 <kernel_main+0x29c>)
 8008d38:	f7fa fe04 	bl	8003944 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &param[2], 1, 1000);
 8008d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d40:	1c99      	adds	r1, r3, #2
 8008d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d46:	2201      	movs	r2, #1
 8008d48:	484e      	ldr	r0, [pc, #312]	; (8008e84 <kernel_main+0x29c>)
 8008d4a:	f7fa fdfb 	bl	8003944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 1);
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d54:	484a      	ldr	r0, [pc, #296]	; (8008e80 <kernel_main+0x298>)
 8008d56:	f7f8 fbb2 	bl	80014be <HAL_GPIO_WritePin>

	cmd = WREG | 0b11<<2 | 0b01;
 8008d5a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008d5e:	f043 030d 	orr.w	r3, r3, #13
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d6e:	4844      	ldr	r0, [pc, #272]	; (8008e80 <kernel_main+0x298>)
 8008d70:	f7f8 fba5 	bl	80014be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008d74:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	4841      	ldr	r0, [pc, #260]	; (8008e84 <kernel_main+0x29c>)
 8008d80:	f7fa fde0 	bl	8003944 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &param[3], 1, 1000);
 8008d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d88:	1cd9      	adds	r1, r3, #3
 8008d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d8e:	2201      	movs	r2, #1
 8008d90:	483c      	ldr	r0, [pc, #240]	; (8008e84 <kernel_main+0x29c>)
 8008d92:	f7fa fdd7 	bl	8003944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 1);
 8008d96:	2201      	movs	r2, #1
 8008d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d9c:	4838      	ldr	r0, [pc, #224]	; (8008e80 <kernel_main+0x298>)
 8008d9e:	f7f8 fb8e 	bl	80014be <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8008da2:	2200      	movs	r2, #0
 8008da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008da8:	4837      	ldr	r0, [pc, #220]	; (8008e88 <kernel_main+0x2a0>)
 8008daa:	f7f8 fb88 	bl	80014be <HAL_GPIO_WritePin>
	uint8_t data[64] = {0};
 8008dae:	2300      	movs	r3, #0
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	1d3b      	adds	r3, r7, #4
 8008db4:	223c      	movs	r2, #60	; 0x3c
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f9ed 	bl	8009198 <memset>
	int32_t val = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint32_t tme = HAL_GetTick();
 8008dc2:	f7f7 fe15 	bl	80009f0 <HAL_GetTick>
 8008dc6:	64b8      	str	r0, [r7, #72]	; 0x48
    while(1)
    {
    	//cs
    	HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, 0);
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008dce:	482c      	ldr	r0, [pc, #176]	; (8008e80 <kernel_main+0x298>)
 8008dd0:	f7f8 fb75 	bl	80014be <HAL_GPIO_WritePin>

    	//START
    	cmd = 0b00001000;
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8008dda:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008de2:	2201      	movs	r2, #1
 8008de4:	4827      	ldr	r0, [pc, #156]	; (8008e84 <kernel_main+0x29c>)
 8008de6:	f7fa fdad 	bl	8003944 <HAL_SPI_Transmit>
    	//read DRDY
    	tme = HAL_GetTick();
 8008dea:	f7f7 fe01 	bl	80009f0 <HAL_GetTick>
 8008dee:	64b8      	str	r0, [r7, #72]	; 0x48
    	while(1){
    		if(HAL_GPIO_ReadPin(ADS_DRDY_GPIO_Port, ADS_DRDY_Pin) < 1){
 8008df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008df4:	4825      	ldr	r0, [pc, #148]	; (8008e8c <kernel_main+0x2a4>)
 8008df6:	f7f8 fb4b 	bl	8001490 <HAL_GPIO_ReadPin>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <kernel_main+0x22a>
    			break;
    		}
    		if(HAL_GetTick()> (tme + 1000)){
 8008e00:	f7f7 fdf6 	bl	80009f0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d802      	bhi.n	8008e16 <kernel_main+0x22e>
    		if(HAL_GPIO_ReadPin(ADS_DRDY_GPIO_Port, ADS_DRDY_Pin) < 1){
 8008e10:	e7ee      	b.n	8008df0 <kernel_main+0x208>
    			break;
 8008e12:	bf00      	nop
 8008e14:	e000      	b.n	8008e18 <kernel_main+0x230>
    			break;
 8008e16:	bf00      	nop
    		}
    	}
    	//RDATA
    	cmd = 0b00000000;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    	//HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
    	for (uint8_t i=0;i<3;i++){
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008e24:	e010      	b.n	8008e48 <kernel_main+0x260>
    		HAL_SPI_TransmitReceive(&hspi2, &cmd, &data[i], 1, 100);
 8008e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	441a      	add	r2, r3
 8008e2e:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8008e32:	2364      	movs	r3, #100	; 0x64
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	2301      	movs	r3, #1
 8008e38:	4812      	ldr	r0, [pc, #72]	; (8008e84 <kernel_main+0x29c>)
 8008e3a:	f7fa febf 	bl	8003bbc <HAL_SPI_TransmitReceive>
    	for (uint8_t i=0;i<3;i++){
 8008e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e42:	3301      	adds	r3, #1
 8008e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d9ea      	bls.n	8008e26 <kernel_main+0x23e>
//    		HAL_SPI_Receive(&hspi2, &data[i], 1, 1000);
    	}
    	val = ((int32_t)(data[0]<<24 | (data[1]<<16) | (data[2]<<8)| (data[3])));
 8008e50:	783b      	ldrb	r3, [r7, #0]
 8008e52:	061a      	lsls	r2, r3, #24
 8008e54:	787b      	ldrb	r3, [r7, #1]
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	78bb      	ldrb	r3, [r7, #2]
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	64fb      	str	r3, [r7, #76]	; 0x4c

		usb_rst_cursor();
 8008e66:	f000 f8d1 	bl	800900c <usb_rst_cursor>
		usb_add_uint8(0xff);
 8008e6a:	20ff      	movs	r0, #255	; 0xff
 8008e6c:	f000 f810 	bl	8008e90 <usb_add_uint8>
		usb_add_uint32(val);
 8008e70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008e72:	f000 f86b 	bl	8008f4c <usb_add_uint32>
		usb_send_buff();
 8008e76:	f000 f8d5 	bl	8009024 <usb_send_buff>
    {
 8008e7a:	e7a5      	b.n	8008dc8 <kernel_main+0x1e0>
 8008e7c:	08008b21 	.word	0x08008b21
 8008e80:	40020400 	.word	0x40020400
 8008e84:	200001f0 	.word	0x200001f0
 8008e88:	40020800 	.word	0x40020800
 8008e8c:	40020000 	.word	0x40020000

08008e90 <usb_add_uint8>:
USBD_StatusTypeDef last_statius = USBD_FAIL;

//////////////////////////////////////////////
// int val
//////////////////////////////////////////////
uint8_t usb_add_uint8(uint8_t data){
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
	usb_buff[usb_cursor] = data;
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <usb_add_uint8+0x3c>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4a0b      	ldr	r2, [pc, #44]	; (8008ed0 <usb_add_uint8+0x40>)
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	5453      	strb	r3, [r2, r1]
	usb_cursor++;
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <usb_add_uint8+0x3c>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <usb_add_uint8+0x3c>)
 8008eb0:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008eb2:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <usb_add_uint8+0x44>)
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <usb_add_uint8+0x44>)
 8008ebc:	801a      	strh	r2, [r3, #0]
	return usb_cursor; //return next byte number
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <usb_add_uint8+0x3c>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	200013f8 	.word	0x200013f8
 8008ed0:	200013fc 	.word	0x200013fc
 8008ed4:	200013fa 	.word	0x200013fa

08008ed8 <usb_add_uint16>:
uint8_t usb_add_uint16(uint16_t data){
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	80fb      	strh	r3, [r7, #6]
	usb_buff[usb_cursor] = data & 0xFF;
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <usb_add_uint16+0x68>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	b2d9      	uxtb	r1, r3
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <usb_add_uint16+0x6c>)
 8008eee:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <usb_add_uint16+0x68>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <usb_add_uint16+0x68>)
 8008efa:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008efc:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <usb_add_uint16+0x70>)
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	4b10      	ldr	r3, [pc, #64]	; (8008f48 <usb_add_uint16+0x70>)
 8008f06:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 8;
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	b299      	uxth	r1, r3
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <usb_add_uint16+0x68>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	b2c9      	uxtb	r1, r1
 8008f16:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <usb_add_uint16+0x6c>)
 8008f18:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <usb_add_uint16+0x68>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <usb_add_uint16+0x68>)
 8008f24:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008f26:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <usb_add_uint16+0x70>)
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <usb_add_uint16+0x70>)
 8008f30:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <usb_add_uint16+0x68>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr
 8008f40:	200013f8 	.word	0x200013f8
 8008f44:	200013fc 	.word	0x200013fc
 8008f48:	200013fa 	.word	0x200013fa

08008f4c <usb_add_uint32>:
uint8_t usb_add_uint32(uint32_t data){
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	usb_buff[usb_cursor] = data 		& 0xFF;
 8008f54:	4b2a      	ldr	r3, [pc, #168]	; (8009000 <usb_add_uint32+0xb4>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	b2d9      	uxtb	r1, r3
 8008f5e:	4b29      	ldr	r3, [pc, #164]	; (8009004 <usb_add_uint32+0xb8>)
 8008f60:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008f62:	4b27      	ldr	r3, [pc, #156]	; (8009000 <usb_add_uint32+0xb4>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b25      	ldr	r3, [pc, #148]	; (8009000 <usb_add_uint32+0xb4>)
 8008f6c:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008f6e:	4b26      	ldr	r3, [pc, #152]	; (8009008 <usb_add_uint32+0xbc>)
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <usb_add_uint32+0xbc>)
 8008f78:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 8 )	& 0xFF;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	0a19      	lsrs	r1, r3, #8
 8008f7e:	4b20      	ldr	r3, [pc, #128]	; (8009000 <usb_add_uint32+0xb4>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	b2c9      	uxtb	r1, r1
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <usb_add_uint32+0xb8>)
 8008f88:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <usb_add_uint32+0xb4>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <usb_add_uint32+0xb4>)
 8008f94:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <usb_add_uint32+0xbc>)
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <usb_add_uint32+0xbc>)
 8008fa0:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 16)	& 0xFF;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	0c19      	lsrs	r1, r3, #16
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <usb_add_uint32+0xb4>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	b2c9      	uxtb	r1, r1
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <usb_add_uint32+0xb8>)
 8008fb0:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <usb_add_uint32+0xb4>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b11      	ldr	r3, [pc, #68]	; (8009000 <usb_add_uint32+0xb4>)
 8008fbc:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <usb_add_uint32+0xbc>)
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <usb_add_uint32+0xbc>)
 8008fc8:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 24;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	0e19      	lsrs	r1, r3, #24
 8008fce:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <usb_add_uint32+0xb4>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	b2c9      	uxtb	r1, r1
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <usb_add_uint32+0xb8>)
 8008fd8:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <usb_add_uint32+0xb4>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4b07      	ldr	r3, [pc, #28]	; (8009000 <usb_add_uint32+0xb4>)
 8008fe4:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	; (8009008 <usb_add_uint32+0xbc>)
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	4b06      	ldr	r3, [pc, #24]	; (8009008 <usb_add_uint32+0xbc>)
 8008ff0:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8008ff2:	4b03      	ldr	r3, [pc, #12]	; (8009000 <usb_add_uint32+0xb4>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr
 8009000:	200013f8 	.word	0x200013f8
 8009004:	200013fc 	.word	0x200013fc
 8009008:	200013fa 	.word	0x200013fa

0800900c <usb_rst_cursor>:
		usb_len++;
	}
	return usb_cursor;
}

void usb_rst_cursor(){
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
	usb_cursor = 0;
 8009010:	4b03      	ldr	r3, [pc, #12]	; (8009020 <usb_rst_cursor+0x14>)
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	200013f8 	.word	0x200013f8

08009024 <usb_send_buff>:
}

//////////////////////////////////////////////
// send buffer
//////////////////////////////////////////////
USBD_StatusTypeDef usb_send_buff(){
 8009024:	b580      	push	{r7, lr}
 8009026:	b0c4      	sub	sp, #272	; 0x110
 8009028:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////
	// generate log packet
		uint16_t data_len = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		uint8_t data_packet[260];
		uint16_t len = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		if(usb_cursor == 0){
 8009036:	4b36      	ldr	r3, [pc, #216]	; (8009110 <usb_send_buff+0xec>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <usb_send_buff+0x24>
			len = 256;
 800903e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009042:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8009046:	e003      	b.n	8009050 <usb_send_buff+0x2c>
		}else{
			len = usb_cursor;
 8009048:	4b31      	ldr	r3, [pc, #196]	; (8009110 <usb_send_buff+0xec>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		}
		//uint8_t	data_crc = 0;
		data_len = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		//preamp
		data_packet[0] = 0xAA;
 8009056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800905a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800905e:	22aa      	movs	r2, #170	; 0xaa
 8009060:	701a      	strb	r2, [r3, #0]
		data_len++;
 8009062:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009066:	3301      	adds	r3, #1
 8009068:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenH;
		data_len++;
 800906c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009070:	3301      	adds	r3, #1
 8009072:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenL;
		data_len++;
 8009076:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800907a:	3301      	adds	r3, #1
 800907c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		/////////////fill packet
		for (uint16_t i = 0; i < len; i++) {
 8009080:	2300      	movs	r3, #0
 8009082:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009086:	e014      	b.n	80090b2 <usb_send_buff+0x8e>
			data_packet[data_len] = usb_buff[i];
 8009088:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800908c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009090:	4920      	ldr	r1, [pc, #128]	; (8009114 <usb_send_buff+0xf0>)
 8009092:	5c89      	ldrb	r1, [r1, r2]
 8009094:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009098:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800909c:	54d1      	strb	r1, [r2, r3]
			data_len++;
 800909e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80090a2:	3301      	adds	r3, #1
 80090a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		for (uint16_t i = 0; i < len; i++) {
 80090a8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80090ac:	3301      	adds	r3, #1
 80090ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80090b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80090b6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d3e4      	bcc.n	8009088 <usb_send_buff+0x64>
		}

		data_packet[1] = data_len>>8;
 80090be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090d0:	705a      	strb	r2, [r3, #1]
		data_packet[2] = data_len & 0xFF;
 80090d2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090e0:	709a      	strb	r2, [r3, #2]
		//data_packet[data_len] = crc8Maxim(data_packet, data_len-1);  //uart sync crc
		data_len++;
 80090e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80090e6:	3301      	adds	r3, #1
 80090e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		// [0xAA][len][rssi][snr][data...][crc]
		// в длину пакета crc не входит
		last_statius = CDC_Transmit_FS(data_packet, data_len);
 80090ec:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff f921 	bl	800833c <CDC_Transmit_FS>
 80090fa:	4603      	mov	r3, r0
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b06      	ldr	r3, [pc, #24]	; (8009118 <usb_send_buff+0xf4>)
 8009100:	701a      	strb	r2, [r3, #0]
		return last_statius;
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <usb_send_buff+0xf4>)
 8009104:	781b      	ldrb	r3, [r3, #0]
}
 8009106:	4618      	mov	r0, r3
 8009108:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200013f8 	.word	0x200013f8
 8009114:	200013fc 	.word	0x200013fc
 8009118:	2000017a 	.word	0x2000017a

0800911c <usb_def_callback>:
uint8_t usb_rx[256];

uint8_t usb_ln = 0;
uint8_t usb_stp = 0;

void usb_def_callback(uint8_t *arr, uint8_t len){
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]

}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
	...

08009134 <usb_set_callback>:





void usb_set_callback(void (*func)(uint8_t *, uint8_t)){
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	f_rx = func;
 800913c:	4a03      	ldr	r2, [pc, #12]	; (800914c <usb_set_callback+0x18>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6013      	str	r3, [r2, #0]
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr
 800914c:	2000017c 	.word	0x2000017c

08009150 <__libc_init_array>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	2600      	movs	r6, #0
 8009154:	4d0c      	ldr	r5, [pc, #48]	; (8009188 <__libc_init_array+0x38>)
 8009156:	4c0d      	ldr	r4, [pc, #52]	; (800918c <__libc_init_array+0x3c>)
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	42a6      	cmp	r6, r4
 800915e:	d109      	bne.n	8009174 <__libc_init_array+0x24>
 8009160:	f000 f822 	bl	80091a8 <_init>
 8009164:	2600      	movs	r6, #0
 8009166:	4d0a      	ldr	r5, [pc, #40]	; (8009190 <__libc_init_array+0x40>)
 8009168:	4c0a      	ldr	r4, [pc, #40]	; (8009194 <__libc_init_array+0x44>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	42a6      	cmp	r6, r4
 8009170:	d105      	bne.n	800917e <__libc_init_array+0x2e>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f855 3b04 	ldr.w	r3, [r5], #4
 8009178:	4798      	blx	r3
 800917a:	3601      	adds	r6, #1
 800917c:	e7ee      	b.n	800915c <__libc_init_array+0xc>
 800917e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009182:	4798      	blx	r3
 8009184:	3601      	adds	r6, #1
 8009186:	e7f2      	b.n	800916e <__libc_init_array+0x1e>
 8009188:	0800922c 	.word	0x0800922c
 800918c:	0800922c 	.word	0x0800922c
 8009190:	0800922c 	.word	0x0800922c
 8009194:	08009230 	.word	0x08009230

08009198 <memset>:
 8009198:	4603      	mov	r3, r0
 800919a:	4402      	add	r2, r0
 800919c:	4293      	cmp	r3, r2
 800919e:	d100      	bne.n	80091a2 <memset+0xa>
 80091a0:	4770      	bx	lr
 80091a2:	f803 1b01 	strb.w	r1, [r3], #1
 80091a6:	e7f9      	b.n	800919c <memset+0x4>

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
